// VBATest.idl : IDL source for VBATest.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (VBATest.tlb) and marshalling code.

//http://support.microsoft.com/kb/241849 - too many methods in interface warning
#if (__midl >= 501)
	midl_pragma warning( disable: 2362 )
#endif

#include "dispid.h"

#define DISPID_Name                     (0x80010000)
#define DISPID_Delete                   (0x80010008)
#define DISPID_Object                   (-802)
#define DISPID_Parent                   (-803)
#define DISPID_NewEnum					(-4)
#define DISPID_Value					(0)

interface IBall;

import "oaidl.idl";
import "ocidl.idl";

[
	uuid(384DF69D-3592-4041-848D-9A2D5CD081A0),
	version(1.0),
	helpstring("Visual Pinball 0.3 Type Library")
]
library VBATESTLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

typedef [uuid(0C49D03B-76F1-47be-A139-B1A4AFB17A37)]
	enum LightState
		{
		LightStateOff = 0,
		LightStateOn = 1,
		LightStateBlinking = 2,
		}
		LightState;

typedef [uuid(CF09B5B7-2DD1-4ba3-ADE7-2F08AB27FCA0)]
	enum ImageAlignment
		{
		ImageAlignWorld = 0,
		ImageAlignTopLeft = 1,
		ImageAlignCenter = 2,
		}
		ImageAlignment;

typedef [uuid(5323810C-F833-48ef-B049-D07506A179B5)]
	enum Shape
		{
		ShapeCircle = 0,
		ShapeCustom = 1,
		}
		Shape;

typedef [uuid(E15D60BC-7E32-4cc5-BA16-E5C368D5891B)]
	enum RampType
		{
		RampTypeFlat = 0,
		RampType4Wire = 1,
		RampType2Wire = 2,
		RampType3WireLeft = 3,
		RampType3WireRight = 4,
		RampType1Wire = 5,
		}
		RampType;

typedef [uuid(4DD01BC6-6A50-4061-A01E-5798021A04AE)]
	enum PlungerType
		{
		PlungerTypeOrig = 0,
		PlungerTypeModern = 1,
		}
		PlungerType;

typedef [uuid(08844451-F92F-4d5c-8FFF-5973F7DBFFB0)]
	enum TextAlignment
		{
		TextAlignLeft = 0,
		TextAlignCenter = 1,
		TextAlignRight = 2,
		}
		TextAlignment;

typedef [uuid(35AA214F-CC1B-4488-9FE8-9B15E0902E4F)]
	enum DecalType
		{
		DecalText = 0,
		DecalImage = 1,
		}
		DecalType;

typedef [uuid(3D2A4542-A7E8-4151-9FAC-8F31313AADB4)]
        enum ReelType
		{
		ReelText = 0,
		ReelImage = 1,
		}
		ReelType;

typedef [uuid(0FEABC0C-56A4-414e-B76D-4C2CECF17A96)]
        enum SequencerState
		{
		// zero is reserved as VBS will give 0 if a unknown enum is given
		SeqUpOn						= 1,
		SeqUpOff					= 2,
		SeqDownOn					= 3,
		SeqDownOff					= 4,
		SeqRightOn					= 5,
		SeqRightOff					= 6,
		SeqLeftOn					= 7,
		SeqLeftOff					= 8,
		SeqDiagUpRightOn			= 9,
		SeqDiagUpRightOff			= 10,
		SeqDiagUpLeftOn				= 11,
		SeqDiagUpLeftOff			= 12,
		SeqDiagDownRightOn			= 13,
		SeqDiagDownRightOff			= 14,
		SeqDiagDownLeftOn			= 15,
		SeqDiagDownLeftOff			= 16,
		SeqMiddleOutHorizOn			= 17,
		SeqMiddleOutHorizOff		= 18,
		SeqMiddleInHorizOn			= 19,
		SeqMiddleInHorizOff			= 20,
		SeqMiddleOutVertOn			= 21,
		SeqMiddleOutVertOff			= 22,
		SeqMiddleInVertOn			= 23,
		SeqMiddleInVertOff			= 24,
		SeqStripe1HorizOn			= 25,
		SeqStripe1HorizOff			= 26,
		SeqStripe2HorizOn			= 27,
		SeqStripe2HorizOff			= 28,
		SeqStripe1VertOn			= 29,
		SeqStripe1VertOff			= 30,
		SeqStripe2VertOn			= 31,
		SeqStripe2VertOff			= 32,
		SeqHatch1HorizOn			= 33,
		SeqHatch1HorizOff			= 34,
		SeqHatch2HorizOn			= 35,
		SeqHatch2HorizOff			= 36,
		SeqHatch1VertOn				= 37,
		SeqHatch1VertOff			= 38,
		SeqHatch2VertOn				= 39,
		SeqHatch2VertOff			= 40,
		SeqCircleOutOn				= 41,
		SeqCircleOutOff				= 42,
		SeqCircleInOn				= 43,
		SeqCircleInOff				= 44,
		SeqClockRightOn				= 45,
		SeqClockRightOff			= 46,
		SeqClockLeftOn				= 47,
		SeqClockLeftOff				= 48,
		SeqRadarRightOn				= 49,
		SeqRadarRightOff			= 50,
		SeqRadarLeftOn				= 51,
		SeqRadarLeftOff				= 52,
		SeqWiperRightOn				= 53,
		SeqWiperRightOff			= 54,
		SeqWiperLeftOn				= 55,
		SeqWiperLeftOff				= 56,
		SeqFanLeftUpOn				= 57,
		SeqFanLeftUpOff             = 58,
		SeqFanLeftDownOn            = 59,
		SeqFanLeftDownOff           = 60,
		SeqFanRightUpOn             = 61,
		SeqFanRightUpOff            = 62,
		SeqFanRightDownOn           = 63,
		SeqFanRightDownOff          = 64,
		SeqArcBottomLeftUpOn		= 65,
		SeqArcBottomLeftUpOff		= 66,
		SeqArcBottomLeftDownOn		= 67,
		SeqArcBottomLeftDownOff		= 68,
		SeqArcBottomRightUpOn		= 69,
		SeqArcBottomRightUpOff		= 70,
		SeqArcBottomRightDownOn		= 71,
		SeqArcBottomRightDownOff	= 72,
		SeqArcTopLeftUpOn			= 73,
		SeqArcTopLeftUpOff			= 74,
		SeqArcTopLeftDownOn			= 75,
		SeqArcTopLeftDownOff		= 76,
		SeqArcTopRightUpOn			= 77,
		SeqArcTopRightUpOff			= 78,
		SeqArcTopRightDownOn		= 79,
		SeqArcTopRightDownOff		= 80,
		SeqScrewRightOn				= 81,
		SeqScrewRightOff			= 82,
		SeqScrewLeftOn				= 83,
		SeqScrewLeftOff				= 84,

		// must be the last of the dynamic effects
		SeqLastDynamic				= 85,

		// fixed effects
		SeqAllOff					= 1000,
		SeqAllOn					= 1001,
		SeqBlinking					= 1002,
		SeqRandom					= 1003,
		}
		SequencerState;

typedef [uuid(A5C333FD-0AD4-490a-BA6B-994CAB23501E)]
	enum SizingType
		{
		AutoSize = 0,
		AutoWidth = 1,
		ManualSize = 2,
		}
		SizingType;

typedef [uuid(C0E543A2-50B3-4546-85F8-4D35BFBE09A2)]
	enum KickerType
		{
		KickerHidden = 0,
		KickerHole = 1,
		KickerCup = 2,
		KickerInvisible = 3,
		}
		KickerType;

typedef [uuid(29BE2E7F-9F33-4d46-BE2B-617D1E0865E2)]
	enum RampImageAlignment
		{
		ImageModeWorld = 0,
		ImageModeWrap = 1,
		}
		RampImageAlignment;

typedef [uuid(4A5DD663-5D96-4fd9-90FE-ED7A37ECDB46)]
	enum VBColors
		{
		vbBlack = 0x00,
		vbRed =  0xFF,
		vbGreen = 0xFF00,
		vbYellow = 0xFFFF,
		vbBlue = 0xFF0000,
		vbMagenta = 0xFF00FF,
		vbCyan = 0xFFFF00,
		vbWhite = 0xFFFFFF,
		} VBColors;

typedef [uuid(E8493732-3AA5-4531-A9BD-B0D8A9D73D5F)]
	enum VBComparison
		{
		vbBinaryCompare = 0,
		vbTextCompare = 1,
		} VBComparison;

typedef [uuid(7A7D27E0-5B0E-48c7-B24F-37A7424B286E)]
	enum VBDateTime
		{
		vbSunday = 1,
		vbMonday = 2,
		vbTuesday = 3,
		vbWednesday = 4,
		vbThursday = 5,
		vbFriday = 6,
		vbSaturday = 7,
		vbUseSystem = 0,
		vbUseSystemDayOfWeek = 0,
		vbFirstJan1 = 1,
		vbFirstFourDays = 2,
		vbFirstFullWeek = 3,
		} VBDateTime;

typedef [uuid(337A49A9-CBA4-4834-9530-00AB6CDFB16A)]
	enum VBDateFormat
		{
		vbGeneralDate = 0,
		vbLongDate = 1,
		vbShortDate = 2,
		vbLongTime = 3,
		vbShortTime = 4,
		} VBDateFormat;

typedef [uuid(B1883E02-15C8-4005-B0F8-EDC1180DB7AF)]
	enum VBMsgBox
		{
		vbOKOnly = 0,
		vbOKCancel = 1,
		vbAbortRetryIgnore = 2,
		vbYesNoCancel = 3,
		vbYesNo = 4,
		vbRetryCancel = 5,
		vbCritical = 16,
		vbQuestion = 32,
		vbExclamation = 48,
		vbInformation = 64,
		vbDefaultButton1 = 0,
		vbDefaultButton2 = 256,
		vbDefaultButton3 = 512,
		vbDefaultButton4 = 768,
		vbApplicationModal = 0,
		vbSystemModal = 4096,
		} VBMsgBox;

typedef [uuid(A971CCA3-FC4B-451c-A470-BB727C481EF6)]
	enum VBMsgBoxReturn
		{
		vbOK = 1,
		vbCancel = 2,
		vbAbort = 3,
		vbRetry = 4,
		vbIgnore = 5,
		vbYes = 6,
		vbNo = 7,
		} VBMsgBoxReturn;

typedef [uuid(3CE2E3BC-463C-41a6-A30B-B08C4845E9AB)]
	enum VBTriState
		{
		vbUseDefault = -2,
		vbTrue = -1,
		vbFalse = 0,
		} VTriState;

typedef [uuid(D09B9F0E-C1AE-40dd-84D6-B1F74053AA8E)]
	enum VBVarType
		{
		vbEmpty = 0,
		vbNull = 1,
		vbInteger = 2,
		vbLong = 3,
		vbSingle = 4,
		vbDouble = 5,
		vbCurrency = 6,
		vbDate = 7,
		vbString = 8,
		vbObject = 9,
		vbError = 10,
		vbBoolean = 11,
		vbVariant = 12,
		vbDataObject = 13,
		vbDecimal = 14,
		vbByte = 17,
		vbArray = 8192,
		} VBVarType;

	////////////////////////////
	// Collection interface
	////////////////////////////
	[
	object, uuid(BE073465-7189-4489-93BC-5B6ABBE1F880),
	dual
	]
	interface ICollection : IDispatch
		{
		// foreach support
		[propget, id(DISPID_NEWENUM),helpcontext(0x5009002)]
		HRESULT _NewEnum([out, retval] IUnknown** ppunk);

		//
		// Methods
		//

		// Item
		[propget, id(0),helpcontext(0x5009003)]
		HRESULT Item([in] long Index, [out, retval] IDispatch **ppobject);

		// Count
		[propget,helpcontext(0x5009004)]
		HRESULT Count([out, retval] long *Count);
		};

	[
	uuid(5B214770-EE20-47f4-9B18-D6491DC59D45),
	]
	dispinterface ICollectionEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_HitEvents_Hit)]  void Hit(long index);
		[id(DISPID_SurfaceEvents_Slingshot)]  void Slingshot(long index);
		[id(DISPID_TimerEvents_Timer)]  void Timer(long index);
		[id(DISPID_SpinnerEvents_Spin)]  void Spin(long index);
		[id(DISPID_HitEvents_Unhit)]  void Unhit(long index);
	}

	//////////////////////
	// Table Interface
	//////////////////////
	[
	object, uuid(AE85BCAC-1734-4e5c-81DA-075AD47A136E),
	dual
	]

	interface ITable : IDispatch
		{
		//[propget, id(1)]
		//HRESULT Application([out, retval] IVisualPinball **Application);
		//[propget, id(2)]
		//HRESULT Parent([out, retval] IVisualPinball **Parent);
		[propget, id(3), helpstring("property GlassHeight")] HRESULT GlassHeight([out, retval] float *pVal);
		[propput, id(3), helpstring("property GlassHeight")] HRESULT GlassHeight([in] float newVal);
		[propget, id(4), helpstring("property PlayfieldColor")] HRESULT PlayfieldColor([out, retval] OLE_COLOR *pVal);
		[propput, id(4), helpstring("property PlayfieldColor")] HRESULT PlayfieldColor([in] OLE_COLOR newVal);
		[propget, id(5), helpstring("property BackdropColor")] HRESULT BackdropColor([out, retval] OLE_COLOR *pVal);
		[propput, id(5), helpstring("property BackdropColor")] HRESULT BackdropColor([in] OLE_COLOR newVal);
		[propget, id(215), helpstring("property SlopeMax")] HRESULT SlopeMax([out, retval] float *pVal);
		[propput, id(215), helpstring("property SlopeMax")] HRESULT SlopeMax([in] float newVal);
		[propget, id(6), helpstring("property SlopeMin")] HRESULT SlopeMin([out, retval] float *pVal);
		[propput, id(6), helpstring("property SlopeMin")] HRESULT SlopeMin([in] float newVal);
		[propget, id(99), helpstring("property Rotation")] HRESULT Rotation([out, retval] float *pVal);
		[propput, id(99), helpstring("property Rotation")] HRESULT Rotation([in] float newVal);
		[propget, id(100), helpstring("property Scalex")] HRESULT Scalex([out, retval] float *pVal);
		[propput, id(100), helpstring("property Scalex")] HRESULT Scalex([in] float newVal);
		[propget, id(101), helpstring("property Scaley")] HRESULT Scaley([out, retval] float *pVal);
		[propput, id(101), helpstring("property Scaley")] HRESULT Scaley([in] float newVal);
		[propget, id(108), helpstring("property Scalez")] HRESULT Scalez([out, retval] float *pVal);
		[propput, id(108), helpstring("property Scalez")] HRESULT Scalez([in] float newVal);
		[propget, id(102), helpstring("property Xlatex")] HRESULT Xlatex([out, retval] float *pVal);
		[propput, id(102), helpstring("property Xlatex")] HRESULT Xlatex([in] float newVal);
		[propget, id(103), helpstring("property Xlatey")] HRESULT Xlatey([out, retval] float *pVal);
		[propput, id(103), helpstring("property Xlatey")] HRESULT Xlatey([in] float newVal);
		[propget, id(110), helpstring("property Xlatez")] HRESULT Xlatez([out, retval] float *pVal);
		[propput, id(110), helpstring("property Xlatez")] HRESULT Xlatez([in] float newVal);
		
		[propget, id(1100), helpstring("property Gravity")] HRESULT Gravity([out, retval] float *pVal);
		[propput, id(1100), helpstring("property Gravity")] HRESULT Gravity([in] float newVal);
		[propget, id(1101), helpstring("property HardFriction")] HRESULT HardFriction([out, retval] float *pVal);
		[propput, id(1101), helpstring("property HardFriction")] HRESULT HardFriction([in] float newVal);
		[propget, id(1102), helpstring("property HardScatter")] HRESULT HardScatter([out, retval] float *pVal);
		[propput, id(1102), helpstring("property HardScatter")] HRESULT HardScatter([in] float newVal);
		[propget, id(1103), helpstring("property MaxBallSpeed")] HRESULT MaxBallSpeed([out, retval] float *pVal);
		[propput, id(1103), helpstring("property MaxBallSpeed")] HRESULT MaxBallSpeed([in] float newVal);
		[propget, id(1104), helpstring("property PlungerNormalize")] HRESULT PlungerNormalize([out, retval] int *pVal);
		[propput, id(1104), helpstring("property PlungerNormalize")] HRESULT PlungerNormalize([in] int newVal);
		[propget, id(1105), helpstring("property PhysicsLoopTime")] HRESULT PhysicsLoopTime([out, retval] int *pVal);
		[propput, id(1105), helpstring("property PhysicsLoopTime")] HRESULT PhysicsLoopTime([in] int newVal);
		[propget, id(1106), helpstring("property DampingFriction")] HRESULT DampingFriction([out, retval] float *pVal);
		[propput, id(1106), helpstring("property DampingFriction")] HRESULT DampingFriction([in] float newVal);

		[propget, id(1107), helpstring("property PlungerFilter")] HRESULT PlungerFilter([out, retval] VARIANT_BOOL *pVal);
		[propput, id(1107), helpstring("property PlungerFilter")] HRESULT PlungerFilter([in] VARIANT_BOOL newVal);

		[propget, id(7), helpstring("property YieldTime")] HRESULT YieldTime([out, retval] long *pVal);
		[propput, id(7), helpstring("property YieldTime")] HRESULT YieldTime([in] long newVal);
		[propget, id(DISPID_Image3), helpstring("property BallImage")] HRESULT BallImage([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image3), helpstring("property BallImage")] HRESULT BallImage([in] BSTR newVal);
		[propget, id(DISPID_Image2), helpstring("property BackdropImage")] HRESULT BackdropImage([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image2), helpstring("property BackdropImage")] HRESULT BackdropImage([in] BSTR newVal);
		[propget, id(DISPID_Table_Width), helpstring("property Width")] HRESULT Width([out, retval] float *pVal);
		[propput, id(DISPID_Table_Width), helpstring("property Width")] HRESULT Width([in] float newVal);
		[propget, id(DISPID_Table_Height), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(DISPID_Table_Height), helpstring("property Height")] HRESULT Height([in] float newVal);
		[propget, id(DISPID_Table_GridSize), helpstring("property GridSize")] HRESULT GridSize([out, retval] float *pVal);
		[propput, id(DISPID_Table_GridSize), helpstring("property GridSize")] HRESULT GridSize([in] float newVal);
		[propget, id(DISPID_Table_Inclination), helpstring("property Inclination")] HRESULT Inclination([out, retval] float *pVal);
		[propput, id(DISPID_Table_Inclination), helpstring("property Inclination")] HRESULT Inclination([in] float newVal);
		[propget, id(DISPID_Table_Layback), helpstring("property Layback")] HRESULT Layback([out, retval] float *pVal);
		[propput, id(DISPID_Table_Layback), helpstring("property Layback")] HRESULT Layback([in] float newVal);
		[propget, id(DISPID_Table_MaxSeparation), helpstring("property MaxSeparation")] HRESULT MaxSeparation([out, retval] float *pVal);
		[propput, id(DISPID_Table_MaxSeparation), helpstring("property MaxSeparation")] HRESULT MaxSeparation([in] float newVal);
		[propget, id(DISPID_Table_ZPD), helpstring("property ZPD")] HRESULT ZPD([out, retval] float *pVal);
		[propput, id(DISPID_Table_ZPD), helpstring("property ZPD")] HRESULT ZPD([in] float newVal);
		[propget, id(427), helpstring("property Overwrite3DStereo")] HRESULT GlobalStereo3D([out, retval] VARIANT_BOOL *pVal);
		[propput, id(427), helpstring("property Overwrite3DStereo")] HRESULT GlobalStereo3D([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Table_FieldOfView), helpstring("property FieldOfView")] HRESULT FieldOfView([out, retval] float *pVal);
		[propput, id(DISPID_Table_FieldOfView), helpstring("property FieldOfView")] HRESULT FieldOfView([in] float newVal);
		[propget, id(DISPID_Table_DisplayGrid), helpstring("property DisplayGrid")] HRESULT DisplayGrid([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Table_DisplayGrid), helpstring("property DisplayGrid")] HRESULT DisplayGrid([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Table_DisplayBackdrop), helpstring("property DisplayBackdrop")] HRESULT DisplayBackdrop([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Table_DisplayBackdrop), helpstring("property DisplayBackdrop")] HRESULT DisplayBackdrop([in] VARIANT_BOOL newVal);
		[id(DISPID_Table_Nudge), helpstring("method Nudge")] HRESULT Nudge([in] float Angle, [in] float Force);
		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(394), helpstring("property enableAA")] HRESULT EnableAntialiasing([out, retval] int *pVal);
		[propput, id(394), helpstring("property enableAA")] HRESULT EnableAntialiasing([in] int newVal);
		[propget, id(395), helpstring("property enableFXAA")] HRESULT EnableFXAA([out, retval] int *pVal);
		[propput, id(395), helpstring("property enableFXAA")] HRESULT EnableFXAA([in] int newVal);
		[propget, id(9), helpstring("property RenderShadows")] HRESULT RenderShadows([out, retval] VARIANT_BOOL *pVal);
		[propput, id(9), helpstring("property RenderShadows")] HRESULT RenderShadows([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Image4), helpstring("property BallFrontDecal")] HRESULT BallFrontDecal([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image4), helpstring("property BallFrontDecal")] HRESULT BallFrontDecal([in] BSTR newVal);
		[propget, id(DISPID_Image5), helpstring("property BallBackDecal")] HRESULT BallBackDecal([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image5), helpstring("property BallBackDecal")] HRESULT BallBackDecal([in] BSTR newVal);
		[propget, id(DISPID_Table_OverridePhysics), helpstring("property OverridePhysics")] HRESULT OverridePhysics([out, retval] long *pVal);
		[propput, id(DISPID_Table_OverridePhysics), helpstring("property OverridePhysics")] HRESULT OverridePhysics([in] long newVal);
		[propget, id(13432), helpstring("property RenderEMReels")] HRESULT EnableEMReels([out, retval] VARIANT_BOOL *pVal);
		[propput, id(13432), helpstring("property RenderEMReels")] HRESULT EnableEMReels([in] VARIANT_BOOL newVal);
		[propget, id(13433), helpstring("property RenderDecals")] HRESULT EnableDecals([out, retval] VARIANT_BOOL *pVal);
		[propput, id(13433), helpstring("property RenderDecals")] HRESULT EnableDecals([in] VARIANT_BOOL newVal);

		//////////////
		[propget, id(200), helpstring("property Accelerometer")] HRESULT Accelerometer([out, retval] VARIANT_BOOL *pVal);
		[propput, id(200), helpstring("property Accelerometer")] HRESULT Accelerometer([in] VARIANT_BOOL newVal);
		[propget, id(201), helpstring("property AccelNormalMount")] HRESULT AccelNormalMount([out, retval] VARIANT_BOOL *pVal);
		[propput, id(201), helpstring("property AccelNormalMount")] HRESULT AccelNormalMount([in] VARIANT_BOOL newVal);

		[propget, id(202), helpstring("property AccelerometerAngle")] HRESULT AccelerometerAngle([out, retval] float *pVal);
		[propput, id(202), helpstring("property AccelerometerAngle")] HRESULT AccelerometerAngle([in] float newVal);
		[propget, id(203), helpstring("property AccelerometerAmp")] HRESULT AccelerometerAmp([out, retval] float *pVal);
		[propput, id(203), helpstring("property AccelerometerAmp")] HRESULT AccelerometerAmp([in] float newVal);
		[propget, id(204), helpstring("property AccelerManualAmp")] HRESULT AccelerManualAmp([out, retval] float *pVal);
		[propput, id(204), helpstring("property AccelerManualAmp")] HRESULT AccelerManualAmp([in] float newVal);

		[propget, id(205), helpstring("property JoltAmount")] HRESULT JoltAmount([out, retval] int *pVal);
		[propput, id(205), helpstring("property JoltAmount")] HRESULT JoltAmount([in] int newVal);
		[propget, id(206), helpstring("property TiltAmount")] HRESULT TiltAmount([out, retval] int *pVal);
		[propput, id(206), helpstring("property TiltAmount")] HRESULT TiltAmount([in] int newVal);
		[propget, id(207), helpstring("property JoltTriggerTime")] HRESULT JoltTriggerTime([out, retval] int *pVal);
		[propput, id(207), helpstring("property JoltTriggerTime")] HRESULT JoltTriggerTime([in] int newVal);
		[propget, id(208), helpstring("property TiltTriggerTime")] HRESULT TiltTriggerTime([out, retval] int *pVal);
		[propput, id(208), helpstring("property TiltTriggerTime")] HRESULT TiltTriggerTime([in] int newVal);

		[propget, id(209), helpstring("property GlobalDifficulty")] HRESULT GlobalDifficulty([out, retval] float *pVal);
		[propput, id(209), helpstring("property GlobalDifficulty")] HRESULT GlobalDifficulty([in] float newVal);

		[propget, id(211), helpstring("property HardwareRender")] HRESULT HardwareRender([out, retval] VARIANT_BOOL *pVal);
		[propput, id(211), helpstring("property HardwareRender")] HRESULT HardwareRender([in] VARIANT_BOOL newVal);
		[propget, id(216), helpstring("property AlternateRender")] HRESULT AlternateRender([out, retval] VARIANT_BOOL *pVal);
		[propput, id(216), helpstring("property AlternateRender")] HRESULT AlternateRender([in] VARIANT_BOOL newVal);
		[propget, id(214), helpstring("property TableHeight")] HRESULT TableHeight([out, retval] float *pVal);
		[propput, id(214), helpstring("property TableHeight")] HRESULT TableHeight([in] float newVal);

		[propget, id(217), helpstring("property DeadZone")] HRESULT DeadZone([out, retval] int *pVal);
		[propput, id(217), helpstring("property DeadZone")] HRESULT DeadZone([in] int newVal);

		[propget, id(218), helpstring("property DeadSlider")] HRESULT DeadSlider([out, retval] int *pVal);
		[propput, id(218), helpstring("property DeadSlider")] HRESULT DeadSlider([in] int newVal);

		[id(35), helpstring("method StartShake")] HRESULT StartShake([defaultvalue(1)] void);
		[id(36), helpstring("method StopShake")] HRESULT StopShake([defaultvalue(1)] void);

		[propget, id(558), helpstring("property Light0Ambient")] HRESULT Light0Ambient([out, retval] OLE_COLOR *pVal);
		[propput, id(558), helpstring("property Light0Ambient")] HRESULT Light0Ambient([in] OLE_COLOR newVal);
		[propget, id(559), helpstring("property Light0Diffuse")] HRESULT Light0Diffuse([out, retval] OLE_COLOR *pVal);
		[propput, id(559), helpstring("property Light0Diffuse")] HRESULT Light0Diffuse([in] OLE_COLOR newVal);
		[propget, id(560), helpstring("property Light0Specular")] HRESULT Light0Specular([out, retval] OLE_COLOR *pVal);
		[propput, id(560), helpstring("property Light0Specular")] HRESULT Light0Specular([in] OLE_COLOR newVal);
		[propget, id(564), helpstring("property Light0PX")] HRESULT Light0PX([out, retval] float *pVal);
		[propput, id(564), helpstring("property Light0PX")] HRESULT Light0PX([in] float newVal);
		[propget, id(565), helpstring("property Light0PY")] HRESULT Light0PY([out, retval] float *pVal);
		[propput, id(565), helpstring("property Light0PY")] HRESULT Light0PY([in] float newVal);
		[propget, id(566), helpstring("property Light0PZ")] HRESULT Light0PZ([out, retval] float *pVal);
		[propput, id(566), helpstring("property Light0PZ")] HRESULT Light0PZ([in] float newVal);
		[propget, id(567), helpstring("property Light0DX")] HRESULT Light0DX([out, retval] float *pVal);
		[propput, id(567), helpstring("property Light0DX")] HRESULT Light0DX([in] float newVal);
		[propget, id(568), helpstring("property Light0DY")] HRESULT Light0DY([out, retval] float *pVal);
		[propput, id(568), helpstring("property Light0DY")] HRESULT Light0DY([in] float newVal);
		[propget, id(569), helpstring("property Light0DZ")] HRESULT Light0DZ([out, retval] float *pVal);
		[propput, id(569), helpstring("property Light0DZ")] HRESULT Light0DZ([in] float newVal);
		[propget, id(570), helpstring("property Light0Type")] HRESULT Light0Type([out, retval] int *pVal);
		[propput, id(570), helpstring("property Light0Type")] HRESULT Light0Type([in] int newVal);

		[propget, id(561), helpstring("property Light1Ambient")] HRESULT Light1Ambient([out, retval] OLE_COLOR *pVal);
		[propput, id(561), helpstring("property Light1Ambient")] HRESULT Light1Ambient([in] OLE_COLOR newVal);
		[propget, id(562), helpstring("property Light1Diffuse")] HRESULT Light1Diffuse([out, retval] OLE_COLOR *pVal);
		[propput, id(562), helpstring("property Light1Diffuse")] HRESULT Light1Diffuse([in] OLE_COLOR newVal);
		[propget, id(563), helpstring("property Light1Specular")] HRESULT Light1Specular([out, retval] OLE_COLOR *pVal);
		[propput, id(563), helpstring("property Light1Specular")] HRESULT Light1Specular([in] OLE_COLOR newVal);
		[propget, id(571), helpstring("property Light1PX")] HRESULT Light1PX([out, retval] float *pVal);
		[propput, id(571), helpstring("property Light1PX")] HRESULT Light1PX([in] float newVal);
		[propget, id(572), helpstring("property Light1PY")] HRESULT Light1PY([out, retval] float *pVal);
		[propput, id(572), helpstring("property Light1PY")] HRESULT Light1PY([in] float newVal);
		[propget, id(573), helpstring("property Light1PZ")] HRESULT Light1PZ([out, retval] float *pVal);
		[propput, id(573), helpstring("property Light1PZ")] HRESULT Light1PZ([in] float newVal);
		[propget, id(574), helpstring("property Light1DX")] HRESULT Light1DX([out, retval] float *pVal);
		[propput, id(574), helpstring("property Light1DX")] HRESULT Light1DX([in] float newVal);
		[propget, id(575), helpstring("property Light1DY")] HRESULT Light1DY([out, retval] float *pVal);
		[propput, id(575), helpstring("property Light1DY")] HRESULT Light1DY([in] float newVal);
		[propget, id(576), helpstring("property Light1DZ")] HRESULT Light1DZ([out, retval] float *pVal);
		[propput, id(576), helpstring("property Light1DZ")] HRESULT Light1DZ([in] float newVal);
		[propget, id(577), helpstring("property Light1Type")] HRESULT Light1Type([out, retval] int *pVal);
		[propput, id(577), helpstring("property Light1Type")] HRESULT Light1Type([in] int newVal);
		[propget, id(578), helpstring("property NormalizeNormals")] HRESULT NormalizeNormals([out, retval] int *pVal);
		[propput, id(578), helpstring("property NormalizeNormals")] HRESULT NormalizeNormals([in] int newVal);
		[propget, id(579), helpstring("property TableSoundVolume")] HRESULT TableSoundVolume([out, retval] int *pVal);
		[propput, id(579), helpstring("property TableSoundVolume")] HRESULT TableSoundVolume([in] int newVal);
		[propget, id(580), helpstring("property TableMusicVolume")] HRESULT TableMusicVolume([out, retval] int *pVal);
		[propput, id(580), helpstring("property TableMusicVolume")] HRESULT TableMusicVolume([in] int newVal);
		[propget, id(585), helpstring("property TableAdaptiveVSync")] HRESULT TableAdaptiveVSync([out, retval] int *pVal);
		[propput, id(585), helpstring("property TableAdaptiveVSync")] HRESULT TableAdaptiveVSync([in] int newVal);
		[propget, id(1700), helpstring("property BallReflection")] HRESULT BallReflection([out, retval] int *pVal);
		[propput, id(1700), helpstring("property BallReflection")] HRESULT BallReflection([in] int newVal);
		[propget, id(1701), helpstring("property ReflectionStength")] HRESULT ReflectionStrength([out, retval] int *pVal);
		[propput, id(1701), helpstring("property ReflectionStength")] HRESULT ReflectionStrength([in] int newVal);
		[propget, id(1702), helpstring("property ShadowX")] HRESULT ShadowX([out, retval] float *pVal);
		[propput, id(1702), helpstring("property ShadowX")] HRESULT ShadowX([in] float newVal);
		[propget, id(1703), helpstring("property ShadowY")] HRESULT ShadowY([out, retval] float *pVal);
		[propput, id(1703), helpstring("property ShadowY")] HRESULT ShadowY([in] float newVal);
		[propget, id(1704), helpstring("property BallTrail")] HRESULT BallTrail([out, retval] int *pVal);
		[propput, id(1704), helpstring("property BallTrail")] HRESULT BallTrail([in] int newVal);
		[propget, id(1705), helpstring("property TrailStength")] HRESULT TrailStrength([out, retval] int *pVal);
		[propput, id(1705), helpstring("property TrailStength")] HRESULT TrailStrength([in] int newVal);
		[propget, id(420), helpstring("property AlphaRampAccuracy")] HRESULT AlphaRampAccuracy([out, retval] int *pVal);
		[propput, id(420), helpstring("property AlphaRampAccuracy")] HRESULT AlphaRampAccuracy([in] int newVal);
		[propget, id(398), helpstring("property OverwriteAlphaAcc")] HRESULT GlobalAlphaAcc([out, retval] VARIANT_BOOL *pVal);
		[propput, id(398), helpstring("property OverwriteAlphaAcc")] HRESULT GlobalAlphaAcc([in] VARIANT_BOOL newVal);
		[id(219), helpstring("method Version")] HRESULT Version([out, retval] int *pVal);
		}

	// Interface exposed globally to script
	[
	object,
	uuid(2981E0E0-8E64-44fc-9A01-64CFFA1F7DBA),
	dual
	]
	interface ITableGlobal : IDispatch
		{
		[id(3), helpstring("method PlaySound")] HRESULT PlaySound(BSTR Sound, [defaultvalue(1)] long LoopCount, [defaultvalue(1)] float Volume, [defaultvalue(0)] float pan, [defaultvalue(0)] float randompitch, [defaultvalue(0)] long pitch, [defaultvalue(0)] VARIANT_BOOL usesame, [defaultvalue(1)] VARIANT_BOOL restart);
		[propget, id(4), helpstring("property LeftFlipperKey")] HRESULT LeftFlipperKey([out, retval] long *pVal);
		[propget, id(5), helpstring("property RightFlipperKey")] HRESULT RightFlipperKey([out, retval] long *pVal);
		[propget, id(6), helpstring("property LeftTiltKey")] HRESULT LeftTiltKey([out, retval] long *pVal);
		[propget, id(7), helpstring("property RightTiltKey")] HRESULT RightTiltKey([out, retval] long *pVal);
		[propget, id(8), helpstring("property CenterTiltKey")] HRESULT CenterTiltKey([out, retval] long *pVal);
		[propget, id(9), helpstring("property PlungerKey")] HRESULT PlungerKey([out, retval] long *pVal);
		[id(10), helpstring("method PlayMusic")] HRESULT PlayMusic(BSTR str);
		[id(11), helpstring("method EndMusic")] HRESULT EndMusic();
		[propget, id(12), helpstring("property StartGameKey")] HRESULT StartGameKey([out, retval] long *pVal);
		[propget, id(13), helpstring("property UserDirectory")] HRESULT UserDirectory([out, retval] BSTR *pVal);
		[propget, id(14), helpstring("property GetPlayerHWnd")] HRESULT GetPlayerHWnd([out, retval] long *pVal);
		//[id(15), helpstring("method AddObject")] HRESULT AddObject(BSTR Name, IDispatch *pdisp);
		[id(16), helpstring("method StopSound")] HRESULT StopSound(BSTR Sound);
		[id(17), helpstring("method SaveValue")] HRESULT SaveValue(BSTR TableName, BSTR ValueName, VARIANT Value);
		[id(18), helpstring("method LoadValue")] HRESULT LoadValue(BSTR TableName, BSTR ValueName, [out, retval] VARIANT *Value);
		[propget, id(19), helpstring("property ActiveBall")] HRESULT ActiveBall([out, retval] IBall **pVal);
		[propget, id(20), helpstring("property AddCreditKey")] HRESULT AddCreditKey([out, retval] long *pVal);
		[propget, id(67), helpstring("property AddCreditKey2")] HRESULT AddCreditKey2([out, retval] long *pVal);
		[propget, id(22), helpstring("property GameTime")] HRESULT GameTime([out, retval] long *pVal);
		[id(23), helpstring("method GetTextFile")] HRESULT GetTextFile(BSTR FileName, [out, retval] BSTR *pContents);
		[propget, id(24), helpstring("property VPBuildVersion")] HRESULT VPBuildVersion([out, retval] long *pVal);
		[id(25), helpstring("method BeginModal")] HRESULT BeginModal();
		[id(26), helpstring("method EndModal")] HRESULT EndModal();
		[id(DISPID_Table_Nudge), helpstring("method Nudge")] HRESULT Nudge([in] float Angle, [in] float Force);

		[propget, id(30), helpstring("property MechanicalTilt")] HRESULT MechanicalTilt([out, retval] long *pVal);
		[propget, id(31), helpstring("property LeftMagnaSave")] HRESULT LeftMagnaSave([out, retval] long *pVal);
		[propget, id(32), helpstring("property RightMagnaSave")] HRESULT RightMagnaSave([out, retval] long *pVal);
		[propget, id(34), helpstring("property ExitGame")] HRESULT ExitGame([out, retval] long *pVal);
		[id(33), helpstring("method FireKnocker")] HRESULT FireKnocker([defaultvalue(1)] int Count);
		[id(35), helpstring("method StartShake")] HRESULT StartShake([defaultvalue(1)] void);
		[id(36), helpstring("method StopShake")] HRESULT StopShake([defaultvalue(1)] void);
		[id(37), helpstring("method QuitPlayer")] HRESULT QuitPlayer([defaultvalue(0)] int CloseType);
		}

	[
	uuid(D3AD16E8-633B-47de-A3B8-92507F37CF65),
	]
	dispinterface ITableEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_GameEvents_KeyDown)]  void KeyDown( [in] long keycode);
		[id(DISPID_GameEvents_KeyUp)]  void KeyUp( [in] long keycode);
		[id(DISPID_GameEvents_MusicDone)]  void MusicDone();
		[id(DISPID_GameEvents_Exit)]  void Exit();
		[id(DISPID_GameEvents_Paused)]  void Paused();
		[id(DISPID_GameEvents_UnPaused)]  void UnPaused();

	}

	//////////////////////////////
	////// Debug
	///////////////////////////////
	[
	object,
	uuid(8668327A-610E-4041-91C4-AF69D261E381),
	dual
	]
	interface IVPDebug : IDispatch
		{
		[id(10), helpstring("method Print")] HRESULT Print([in, optional] VARIANT* pvar);
		}

	//////////////////////////////
	////// Wall (Surface)
	///////////////////////////////
	[
		object,
		uuid(882F3E68-8503-4300-8AC0-91E8DF3F8D6D),
		dual,
		helpstring("ISurface Interface"),
		pointer_default(unique)
	]
	interface IWall : IDispatch
	{
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(3), helpstring("property HasHitEvent")] HRESULT HasHitEvent([out, retval] VARIANT_BOOL *pVal);
		[propput, id(3), helpstring("property HasHitEvent")] HRESULT HasHitEvent([in] VARIANT_BOOL newVal);
		[propget, id(4), helpstring("property Threshold")] HRESULT Threshold([out, retval] float *pVal);
		[propput, id(4), helpstring("property Threshold")] HRESULT Threshold([in] float newVal);
		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);
		[propget, id(6), helpstring("property SideColor")] HRESULT SideColor([out, retval] OLE_COLOR *pVal);
		[propput, id(6), helpstring("property SideColor")] HRESULT SideColor([in] OLE_COLOR newVal);
		[propget, id(7), helpstring("property ImageAlignment")] HRESULT ImageAlignment([out, retval] ImageAlignment *pVal);
		[propput, id(7), helpstring("property ImageAlignment")] HRESULT ImageAlignment([in] ImageAlignment newVal);
		[propget, id(8), helpstring("property HeightBottom")] HRESULT HeightBottom([out, retval] float *pVal);
		[propput, id(8), helpstring("property HeightBottom")] HRESULT HeightBottom([in] float newVal);
		[propget, id(9), helpstring("property HeightTop")] HRESULT HeightTop([out, retval] float *pVal);
		[propput, id(9), helpstring("property HeightTop")] HRESULT HeightTop([in] float newVal);
		[propget, id(10), helpstring("property FaceColor")] HRESULT FaceColor([out, retval] OLE_COLOR *pVal);
		[propput, id(10), helpstring("property FaceColor")] HRESULT FaceColor([in] OLE_COLOR newVal);
		[propget, id(11), helpstring("property CanDrop")] HRESULT CanDrop([out, retval] VARIANT_BOOL *pVal);
		[propput, id(11), helpstring("property CanDrop")] HRESULT CanDrop([in] VARIANT_BOOL newVal);
		
		[propget, id(110), helpstring("property Collidable")] HRESULT Collidable([out, retval] VARIANT_BOOL *pVal);
		[propput, id(110), helpstring("property Collidable")] HRESULT Collidable([in] VARIANT_BOOL newVal);
		
		[propget, id(12), helpstring("property IsDropped")] HRESULT IsDropped([out, retval] VARIANT_BOOL *pVal);
		[propput, id(12), helpstring("property IsDropped")] HRESULT IsDropped([in] VARIANT_BOOL newVal);
		[propget, id(13), helpstring("property DisplayTexture")] HRESULT DisplayTexture([out, retval] VARIANT_BOOL *pVal);
		[propput, id(13), helpstring("property DisplayTexture")] HRESULT DisplayTexture([in] VARIANT_BOOL newVal);
		[propget, id(14), helpstring("property SlingshotStrength")] HRESULT SlingshotStrength([out, retval] float *pVal);
		[propput, id(14), helpstring("property SlingshotStrength")] HRESULT SlingshotStrength([in] float newVal);
		[propget, id(15), helpstring("property Elasticity")] HRESULT Elasticity([out, retval] float *pVal);
		[propput, id(15), helpstring("property Elasticity")] HRESULT Elasticity([in] float newVal);
		[propget, id(107), helpstring("property CastsShadow")] HRESULT CastsShadow([out, retval] VARIANT_BOOL *pVal);
		[propput, id(107), helpstring("property CastsShadow")] HRESULT CastsShadow([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Image2), helpstring("property SideImage")] HRESULT SideImage([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image2), helpstring("property SideImage")] HRESULT SideImage([in] BSTR newVal);
		[propget, id(16), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(16), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(108), helpstring("property Disabled")] HRESULT Disabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(108), helpstring("property Disabled")] HRESULT Disabled([in] VARIANT_BOOL newVal);
		[propget, id(109), helpstring("property SideVisible")] HRESULT SideVisible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(109), helpstring("property SideVisible")] HRESULT SideVisible([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(17), helpstring("property SlingshotColor")] HRESULT SlingshotColor([out, retval] OLE_COLOR *pVal);
		[propput, id(17), helpstring("property SlingshotColor")] HRESULT SlingshotColor([in] OLE_COLOR newVal);
		[propget, id(111), helpstring("property SlingshotThreshold")] HRESULT SlingshotThreshold([out, retval] float *pVal);
		[propput, id(111), helpstring("property SlingshotThreshold")] HRESULT SlingshotThreshold([in] float newVal);
		[propget, id(112), helpstring("property SlingshotAnimation")] HRESULT SlingshotAnimation([out, retval] VARIANT_BOOL *pVal);
		[propput, id(112), helpstring("property SlingshotAnimation")] HRESULT SlingshotAnimation([in] VARIANT_BOOL newVal);
		[propget, id(113), helpstring("property FlipbookAnimation")] HRESULT FlipbookAnimation([out, retval] VARIANT_BOOL *pVal);
		[propput, id(113), helpstring("property FlipbookAnimation")] HRESULT FlipbookAnimation([in] VARIANT_BOOL newVal);

		[propget, id(114), helpstring("property Friction")] HRESULT Friction([out, retval] float *pVal);
		[propput, id(114), helpstring("property Friction")] HRESULT Friction([in] float newVal);
		[propget, id(115), helpstring("property Scatter")] HRESULT Scatter([out, retval] float *pVal);
		[propput, id(115), helpstring("property Scatter")] HRESULT Scatter([in] float newVal);

		[propget, id(557), helpstring("property EnableLighting")] HRESULT EnableLighting([out, retval] VARIANT_BOOL *pVal);
		[propput, id(557), helpstring("property EnableLighting")] HRESULT EnableLighting([in] VARIANT_BOOL newVal);
	};

	[
	uuid(1128A15E-1388-450f-A517-2819808CF7CF),
	]
	dispinterface IWallEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_HitEvents_Hit)]  void Hit();
		[id(DISPID_SurfaceEvents_Slingshot)]  void Slingshot();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
	}

	[
		object,
		uuid(353B4F85-BABC-4FEB-B664-91CE3DB3C0FA),
		dual,
		helpstring("IControlPoint Interface"),
		pointer_default(unique)
	]
	interface IControlPoint : IDispatch
	{
		[propget, id(1), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(1), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(2), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(2), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(3), helpstring("property Smooth")] HRESULT Smooth([out, retval] VARIANT_BOOL *pVal);
		[propput, id(3), helpstring("property Smooth")] HRESULT Smooth([in] VARIANT_BOOL newVal);
		[propget, id(4), helpstring("property IsAutoTextureCoordinate")] HRESULT IsAutoTextureCoordinate([out, retval] VARIANT_BOOL *pVal);
		[propput, id(4), helpstring("property IsAutoTextureCoordinate")] HRESULT IsAutoTextureCoordinate([in] VARIANT_BOOL newVal);
		[propget, id(5), helpstring("property TextureCoordinateU")] HRESULT TextureCoordinateU([out, retval] float *pVal);
		[propput, id(5), helpstring("property TextureCoordinateU")] HRESULT TextureCoordinateU([in] float newVal);
	};


	//////////////////////////////
	////// Flipper
	///////////////////////////////

	[
		object,
		uuid(B4957EA2-33BE-45E6-93C2-CA16B8755BF3),
		dual,
		helpstring("IFlipper Interface"),
		pointer_default(unique)
	]

	interface IFlipper : IDispatch
	{
		[propget, id(1), helpstring("property BaseRadius")] HRESULT BaseRadius([out, retval] float *pVal);
		[propput, id(1), helpstring("property BaseRadius")] HRESULT BaseRadius([in] float newVal);
		[propget, id(2), helpstring("property EndRadius")] HRESULT EndRadius([out, retval] float *pVal);
		[propput, id(2), helpstring("property EndRadius")] HRESULT EndRadius([in] float newVal);
		[propget, id(3), helpstring("property Length")] HRESULT Length([out, retval] float *pVal);
		[propput, id(3), helpstring("property Length")] HRESULT Length([in] float newVal);
		[propget, id(4), helpstring("property StartAngle")] HRESULT StartAngle([out, retval] float *pVal);
		[propput, id(4), helpstring("property StartAngle")] HRESULT StartAngle([in] float newVal);
		[id(5), helpstring("method RotateToEnd")] HRESULT RotateToEnd();
		[id(6), helpstring("method RotateToStart")] HRESULT RotateToStart();
		[propget, id(7), helpstring("property EndAngle")] HRESULT EndAngle([out, retval] float *pVal);
		[propput, id(7), helpstring("property EndAngle")] HRESULT EndAngle([in] float newVal);
		//[propget, id(8)]
		//HRESULT Application([out, retval] IVisualPinball **Application);
		//[propget, id(9)]
		//HRESULT Parent([out, retval] ITable **Parent);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(12), nonbrowsable, helpstring("property CurrentAngle")] HRESULT CurrentAngle([out, retval] float *pVal);
		[propget, id(13), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(13), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(14), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(14), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(15), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(15), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(DISPID_Flipper_Speed), helpstring("property Speed")] HRESULT Speed([out, retval] float *pVal);
		[propput, id(DISPID_Flipper_Speed), helpstring("property Speed")] HRESULT Speed([in] float newVal);
		[propget, id(DISPID_Flipper_OverridePhysics), helpstring("property OverridePhysics")] HRESULT OverridePhysics([out, retval] long *pVal);
		[propput, id(DISPID_Flipper_OverridePhysics), helpstring("property OverridePhysics")] HRESULT OverridePhysics([in] long newVal);
		[propget, id(17), helpstring("property RubberColor")] HRESULT RubberColor([out, retval] OLE_COLOR *pVal);
		[propput, id(17), helpstring("property RubberColor")] HRESULT RubberColor([in] OLE_COLOR newVal);
		[propget, id(18), helpstring("property RubberThickness")] HRESULT RubberThickness([out, retval] long *pVal);
		[propput, id(18), helpstring("property RubberThickness")] HRESULT RubberThickness([in] long newVal);
		[propget, id(19), helpstring("property Strength")] HRESULT Strength([out, retval] float *pVal);
		[propput, id(19), helpstring("property Strength")] HRESULT Strength([in] float newVal);
		[propget, id(20), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(20), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(394), helpstring("property Enabled")] HRESULT Enabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(394), helpstring("property Enabled")] HRESULT Enabled([in] VARIANT_BOOL newVal);
		[propget, id(398), helpstring("property Compatibility")] HRESULT CompatibilityMode([out, retval] VARIANT_BOOL *pVal);
		[propput, id(398), helpstring("property Compatibility")] HRESULT CompatibilityMode([in] VARIANT_BOOL newVal);
		[propget, id(21), helpstring("property Elasticity")] HRESULT Elasticity([out, retval] float *pVal);
		[propput, id(21), helpstring("property Elasticity")] HRESULT Elasticity([in] float newVal);
		[propget, id(22), helpstring("property Recoil")] HRESULT Recoil([out, retval] float *pVal);
		[propput, id(22), helpstring("property Recoil")] HRESULT Recoil([in] float newVal);
		[propget, id(23), helpstring("property Return")] HRESULT Return([out, retval] float *pVal);
		[propput, id(23), helpstring("property Return")] HRESULT Return([in] float newVal);
		[propget, id(24), helpstring("property RubberHeight")] HRESULT RubberHeight([out, retval] long *pVal);
		[propput, id(24), helpstring("property RubberHeight")] HRESULT RubberHeight([in] long newVal);
		[propget, id(25), helpstring("property RubberWidth")] HRESULT RubberWidth([out, retval] long *pVal);
		[propput, id(25), helpstring("property RubberWidth")] HRESULT RubberWidth([in] long newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(107), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(107), helpstring("property Height")] HRESULT Height([in] float newVal);

		//[propget, id(108), helpstring("property Mass")] HRESULT Mass([out, retval] float *pVal);
		//[propput, id(108), helpstring("property Mass")] HRESULT Mass([in] float newVal);

		[propget, id(109), helpstring("property PowerLaw")] HRESULT PowerLaw([out, retval] float *pVal);
		[propput, id(109), helpstring("property PowerLaw")] HRESULT PowerLaw([in] float newVal);
		[propget, id(110), helpstring("property ObliqueCorrection")] HRESULT ObliqueCorrection([out, retval] float *pVal);
		[propput, id(110), helpstring("property ObliqueCorrection")] HRESULT ObliqueCorrection([in] float newVal);
		[propget, id(111), helpstring("property FlipperRadiusMin")] HRESULT FlipperRadiusMin([out, retval] float *pVal);
		[propput, id(111), helpstring("property FlipperRadiusMin")] HRESULT FlipperRadiusMin([in] float newVal);
		[propget, id(112), helpstring("property ScatterAngle")] HRESULT ScatterAngle([out, retval] float *pVal);
		[propput, id(112), helpstring("property ScatterAngle")] HRESULT ScatterAngle([in] float newVal);
	};

	[
	uuid(C1001167-49EE-4d66-B9F4-A1623847510A),
	]
	dispinterface IFlipperEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_HitEvents_Hit)]  void Hit();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_LimitEvents_EOS)]  void LimitEOS( [in] float parm);
		[id(DISPID_LimitEvents_BOS)]  void LimitBOS( [in] float parm);
		[id(DISPID_FlipperEvents_Collide)]  void Collide( [in] float parm);		
	}


	//////////////////////////////
	////// Timer
	///////////////////////////////
	[
		object,
		uuid(C74673FA-0F67-49F0-8469-18ADDAF52355),
		dual,
		helpstring("ITimer Interface"),
		pointer_default(unique)
	]
	interface ITimer : IDispatch
	{
		[propget, id(DISPID_Timer_Enabled), helpstring("property Enabled")] HRESULT Enabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property Enabled")] HRESULT Enabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property Interval")] HRESULT Interval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property Interval")] HRESULT Interval([in] long newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
	};

	[
	uuid(DC13DC5B-FF29-4ef4-93E1-06C4B8603AEF),
	]
	dispinterface ITimerEvents
	{
	properties:
	methods:
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_GameEvents_Init)]  void Init();
	}

	//////////////////////////////
	////// Plunger
	///////////////////////////////

	[
		object,
		uuid(3B0BF779-B5D2-4445-B804-EF1E9890FE98),
		dual,
		helpstring("IPlunger Interface"),
		pointer_default(unique)
	]
	interface IPlunger : IDispatch
	{
		[id(1), helpstring("method PullBack")] HRESULT PullBack();
		[id(2), helpstring("method Fire")] HRESULT Fire();
		[propget, id(3), helpstring("property PullSpeed")] HRESULT PullSpeed([out, retval] float *pVal);
		[propput, id(3), helpstring("property PullSpeed")] HRESULT PullSpeed([in] float newVal);
		[propget, id(4), helpstring("property FireSpeed")] HRESULT FireSpeed([out, retval] float *pVal);
		[propput, id(4), helpstring("property FireSpeed")] HRESULT FireSpeed([in] float newVal);
		[id(5), helpstring("method CreateBall")] HRESULT CreateBall([out, retval] IBall **Ball);		
		[id(6), helpstring("method Position")] HRESULT Position([out, retval] int *pVal); //added for mechanical plunger position BDS
		[id(216), helpstring("method MotionDevice")] HRESULT MotionDevice([out, retval] int *pVal); //added for uShockType
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(DISPID_X), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(DISPID_X), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(DISPID_Y), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(DISPID_Y), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(390), helpstring("property Type")] HRESULT Type([out, retval] PlungerType *pVal);
		[propput, id(390), helpstring("property Type")] HRESULT Type([in] PlungerType newVal);
		[propget, id(391), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(391), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);

		[propget, id(110), helpstring("property MechPlunger")] HRESULT MechPlunger([out, retval] VARIANT_BOOL *pVal);
		[propput, id(110), helpstring("property MechPlunger")] HRESULT MechPlunger([in] VARIANT_BOOL newVal);
		[propget, id(116), helpstring("property AutoPlunger")] HRESULT AutoPlunger([out, retval] VARIANT_BOOL *pVal);
		[propput, id(116), helpstring("property AutoPlunger")] HRESULT AutoPlunger([in] VARIANT_BOOL newVal);
		[propget, id(117), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(117), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(111), helpstring("property MechStrength")] HRESULT MechStrength([out, retval] float *pVal);
		[propput, id(111), helpstring("property MechStrength")] HRESULT MechStrength([in] float newVal);
		[propget, id(112), helpstring("property ParkPosition")] HRESULT ParkPosition([out, retval] float *pVal);
		[propput, id(112), helpstring("property ParkPosition")] HRESULT ParkPosition([in] float newVal);
		[propget, id(113), helpstring("property Stroke")] HRESULT Stroke([out, retval] float *pVal);
		[propput, id(113), helpstring("property Stroke")] HRESULT Stroke([in] float newVal);
		[propget, id(114), helpstring("property ScatterVelocity")] HRESULT ScatterVelocity([out, retval] float *pVal);
		[propput, id(114), helpstring("property ScatterVelocity")] HRESULT ScatterVelocity([in] float newVal);
		[propget, id(115), helpstring("property BreakOverVelocity")] HRESULT BreakOverVelocity([out, retval] float *pVal);
		[propput, id(115), helpstring("property BreakOverVelocity")] HRESULT BreakOverVelocity([in] float newVal);
		
	};

	[
	uuid(9BCA5DD9-B893-4595-9D3A-8BD77FB5DE71),
	]
	dispinterface IPlungerEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_LimitEvents_EOS)]  void LimitEOS( [in] float parm);
		[id(DISPID_LimitEvents_BOS)]  void LimitBOS( [in] float parm);
	}

	//////////////////////////////
	////// Textbox
	///////////////////////////////

	[
		object,
		uuid(596FCD76-C5E8-4B6A-A333-FB0D645E0518),
		dual,
		helpstring("ITextbox Interface"),
		pointer_default(unique)
	]
	interface ITextbox : IDispatch
	{
		[propget, id(DISPID_Textbox_BackColor), helpstring("property BackColor")] HRESULT BackColor([out, retval] OLE_COLOR *pVal);
		[propput, id(DISPID_Textbox_BackColor), helpstring("property BackColor")] HRESULT BackColor([in] OLE_COLOR newVal);
		[propget, id(DISPID_Textbox_FontColor), helpstring("property FontColor")] HRESULT FontColor([out, retval] OLE_COLOR *pVal);
		[propput, id(DISPID_Textbox_FontColor), helpstring("property FontColor")] HRESULT FontColor([in] OLE_COLOR newVal);
		[propget, id(3), helpstring("property Text")] HRESULT Text([out, retval] BSTR *pVal);
		[propput, id(3), helpstring("property Text")] HRESULT Text([in] BSTR newVal);
		[propget, id(DISPID_Textbox_Font), helpstring("property Font")] HRESULT Font([out, retval] IFontDisp **pVal);
		[propputref, id(DISPID_Textbox_Font), helpstring("property Font")] HRESULT Font([in] IFontDisp *newVal);
		[propget, id(60002), helpstring("property Width")] HRESULT Width([out, retval] float *pVal);
		[propput, id(60002), helpstring("property Width")] HRESULT Width([in] float newVal);
		[propget, id(60003), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(60003), helpstring("property Height")] HRESULT Height([in] float newVal);
		[propget, id(11), helpstring("property Alignment")] HRESULT Alignment([out, retval] TextAlignment *pVal);
		[propput, id(11), helpstring("property Alignment")] HRESULT Alignment([in] TextAlignment newVal);
		[propget, id(12), helpstring("property IsTransparent")] HRESULT IsTransparent([out, retval] VARIANT_BOOL *pVal);
		[propput, id(12), helpstring("property IsTransparent")] HRESULT IsTransparent([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(60000), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(60000), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(60001), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(60001), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
	};

	[
	uuid(F1C767B8-7351-4ebc-8022-E73143BE6F5D),
	]
	dispinterface ITextboxEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
	}

	//////////////////////////////
	////// Bumper
	///////////////////////////////

	[
		object,
		uuid(4CB2FCCA-9336-48FF-90BD-F8D01C16BE8C),
		dual,
		helpstring("IBumper Interface"),
		pointer_default(unique)
	]
	interface IBumper : IDispatch
	{
		[propget, id(8), helpstring("property Radius")] HRESULT Radius([out, retval] float *pVal);
		[propput, id(8), helpstring("property Radius")] HRESULT Radius([in] float newVal);
		[propget, id(DISPID_X), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(DISPID_X), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(DISPID_Y), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(DISPID_Y), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(11), helpstring("property State")] HRESULT State([out, retval] LightState *pVal);
		[propput, id(11), helpstring("property State")] HRESULT State([in] LightState newVal);
		[propget, id(12), helpstring("property BlinkPattern")] HRESULT BlinkPattern([out, retval] BSTR *pVal);
		[propput, id(12), helpstring("property BlinkPattern")] HRESULT BlinkPattern([in] BSTR newVal);
		[propget, id(13), helpstring("property BlinkInterval")] HRESULT BlinkInterval([out, retval] long *pVal);
		[propput, id(13), helpstring("property BlinkInterval")] HRESULT BlinkInterval([in] long newVal);
		[propget, id(14), helpstring("property FlashWhenHit")] HRESULT FlashWhenHit([out, retval] VARIANT_BOOL *pVal);
		[propput, id(14), helpstring("property FlashWhenHit")] HRESULT FlashWhenHit([in] VARIANT_BOOL newVal);
		[propget, id(15), helpstring("property SideColor")] HRESULT SideColor([out, retval] OLE_COLOR *pVal);
		[propput, id(15), helpstring("property SideColor")] HRESULT SideColor([in] OLE_COLOR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
		[propget, id(2), helpstring("property Force")] HRESULT Force([out, retval] float *pVal);
		[propput, id(2), helpstring("property Force")] HRESULT Force([in] float newVal);
		[propget, id(3), helpstring("property Threshold")] HRESULT Threshold([out, retval] float *pVal);
		[propput, id(3), helpstring("property Threshold")] HRESULT Threshold([in] float newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(6), helpstring("property Overhang")] HRESULT Overhang([out, retval] float *pVal);
		[propput, id(6), helpstring("property Overhang")] HRESULT Overhang([in] float newVal);
		[propget, id(7), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(7), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(24), helpstring("property HeightOffset")] HRESULT HeightOffset([out, retval] float *pVal);
		[propput, id(24), helpstring("property HeightOffset")] HRESULT HeightOffset([in] float newVal);
		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
//>>> added by chris
		[propget, id(107), helpstring("property CastsShadow")] HRESULT CastsShadow([out, retval] VARIANT_BOOL *pVal);
		[propput, id(107), helpstring("property CastsShadow")] HRESULT CastsShadow([in] VARIANT_BOOL newVal);
		[propget, id(108), helpstring("property Disabled")] HRESULT Disabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(108), helpstring("property Disabled")] HRESULT Disabled([in] VARIANT_BOOL newVal);
		[propget, id(109), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(109), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(110), helpstring("property SideVisible")] HRESULT SideVisible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(110), helpstring("property SideVisible")] HRESULT SideVisible([in] VARIANT_BOOL newVal);
//<<<
	};

	[
	uuid(D868EE8D-AF83-4c7a-A68E-1DBA956434A7),
	]
	dispinterface IBumperEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_HitEvents_Hit)]  void Hit();
	}

	//////////////////////////////
	////// Trigger
	///////////////////////////////

	[
		object,
		uuid(CD5054C6-016F-4BB5-B131-12FE29720DF8),
		dual,
		helpstring("ITrigger Interface"),
		pointer_default(unique)
	]
	interface ITrigger : IDispatch
	{
		[propget, id(1), helpstring("property Radius")] HRESULT Radius([out, retval] float *pVal);
		[propput, id(1), helpstring("property Radius")] HRESULT Radius([in] float newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(DISPID_X), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(DISPID_X), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(DISPID_Y), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(DISPID_Y), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(DISPID_Enabled), helpstring("property Enabled")] HRESULT Enabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Enabled), helpstring("property Enabled")] HRESULT Enabled([in] VARIANT_BOOL newVal);
		[propget, id(7), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(7), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Shape), helpstring("property Shape")] HRESULT Shape([out, retval] Shape *pVal);
		[propput, id(DISPID_Shape), helpstring("property Shape")] HRESULT Shape([in] Shape newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[id(312), helpstring("method BallCntOver")] HRESULT BallCntOver([out, retval] int *pVal);
		[id(313), helpstring("method DestroyBall")] HRESULT DestroyBall([out, retval] int *pVal);
		[propget, id(314), helpstring("property HitHeight")] HRESULT HitHeight([out, retval] float *pVal);
		[propput, id(314), helpstring("property HitHeight")] HRESULT HitHeight([in] float newVal);
	};

	[
	uuid(8B71CB94-698C-4839-8832-956501D3DECA),
	]
	dispinterface ITriggerEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_HitEvents_Hit)]  void Hit();
		[id(DISPID_HitEvents_Unhit)]  void Unhit();
	}

	//////////////////////////////
	////// Light
	///////////////////////////////

	[
		object,
		uuid(D3013008-52AF-410B-AD03-66EB37D1C8AC),
		dual,
		helpstring("ILight Interface"),
		pointer_default(unique)
	]
	interface ILight : IDispatch
	{
		[propget, id(1), helpstring("property Radius")] HRESULT Radius([out, retval] float *pVal);
		[propput, id(1), helpstring("property Radius")] HRESULT Radius([in] float newVal);
		[propget, id(DISPID_Light_State), helpstring("property State")] HRESULT State([out, retval] LightState *pVal);
		[propput, id(DISPID_Light_State), helpstring("property State")] HRESULT State([in] LightState newVal);
		[propget, id(3), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(3), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(DISPID_X), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(DISPID_X), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(DISPID_Y), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(DISPID_Y), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(DISPID_Shape), helpstring("property Shape")] HRESULT Shape([out, retval] Shape *pVal);
		[propput, id(DISPID_Shape), helpstring("property Shape")] HRESULT Shape([in] Shape newVal);
		[propget, id(9), helpstring("property BlinkPattern")] HRESULT BlinkPattern([out, retval] BSTR *pVal);
		[propput, id(9), helpstring("property BlinkPattern")] HRESULT BlinkPattern([in] BSTR newVal);
		[propget, id(DISPID_Light_BlinkInterval), helpstring("property BlinkInterval")] HRESULT BlinkInterval([out, retval] long *pVal);
		[propput, id(DISPID_Light_BlinkInterval), helpstring("property BlinkInterval")] HRESULT BlinkInterval([in] long newVal);
		[propget, id(11), helpstring("property BorderColor")] HRESULT BorderColor([out, retval] OLE_COLOR *pVal);
		[propput, id(11), helpstring("property BorderColor")] HRESULT BorderColor([in] OLE_COLOR newVal);
		[propget, id(12), helpstring("property BorderWidth")] HRESULT BorderWidth([out, retval] float *pVal);
		[propput, id(12), helpstring("property BorderWidth")] HRESULT BorderWidth([in] float newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(DISPID_Image), helpstring("property OffImage")] HRESULT OffImage([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property OffImage")] HRESULT OffImage([in] BSTR newVal);
		[propget, id(DISPID_Image2), helpstring("property OnImage")] HRESULT OnImage([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image2), helpstring("property OnImage")] HRESULT OnImage([in] BSTR newVal);
		[propget, id(13), helpstring("property DisplayImage")] HRESULT DisplayImage([out, retval] VARIANT_BOOL *pVal);
		[propput, id(13), helpstring("property DisplayImage")] HRESULT DisplayImage([in] VARIANT_BOOL newVal);
		[propget, id(394), helpstring("property EnableOffLighting")] HRESULT EnableOffLighting([out, retval] int *pVal);
		[propput, id(394), helpstring("property EnableOffLighting")] HRESULT EnableOffLighting([in] int newVal);
		[propget, id(557), helpstring("property EnableLighting")] HRESULT EnableLighting([out, retval] int *pVal);
		[propput, id(557), helpstring("property EnableLighting")] HRESULT EnableLighting([in] int newVal);
		[propget, id(398), helpstring("property OnImageIsLightmap")] HRESULT OnImageIsLightmap([out, retval] int *pVal);
		[propput, id(398), helpstring("property OnImageIsLightmap")] HRESULT OnImageIsLightmap([in] int newVal);
		[propget, id(397), helpstring("property DepthBias")] HRESULT DepthBias([out, retval] float *pVal);
		[propput, id(397), helpstring("property DepthBias")] HRESULT DepthBias([in] float newVal);
	};

	[
	uuid(9C07F82F-325E-482f-BC09-10F014834755),
	]
	dispinterface ILightEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
	}


	//////////////////////////////
	////// Kicker
	///////////////////////////////

	[
		object,
		uuid(DBC4625D-6226-4AFA-8649-75B43C332041),
		dual,
		helpstring("IKicker Interface"),
		pointer_default(unique)
	]
	interface IKicker : IDispatch  
	{
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[id(1), helpstring("method CreateBall")] HRESULT CreateBall([out, retval] IBall **Ball);
		[id(11), helpstring("method CreateSizedBall")] HRESULT CreateSizedBall([in] float radius, [out, retval] IBall **Ball);
		[id(2), helpstring("method DestroyBall")] HRESULT DestroyBall([out, retval] int *pVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[id(5), helpstring("method Kick")] HRESULT Kick(float angle, float speed, [defaultvalue(0)] float inclination);
		[id(310), helpstring("method KickXYZ")] HRESULT KickXYZ(float angle, float speed, float inclination, float x, float y, float z);
		[id(311), helpstring("method KickZ")] HRESULT KickZ(float angle, float speed, float inclination, float heightz);
		[propget, id(DISPID_X), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(DISPID_X), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(DISPID_Y), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(DISPID_Y), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(DISPID_Enabled), helpstring("property Enabled")] HRESULT Enabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Enabled), helpstring("property Enabled")] HRESULT Enabled([in] VARIANT_BOOL newVal);
		[propget, id(9), helpstring("property DrawStyle")] HRESULT DrawStyle([out, retval] KickerType *pVal);
		[propput, id(9), helpstring("property DrawStyle")] HRESULT DrawStyle([in] KickerType newVal);
		[propget, id(10), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(10), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[id(312), helpstring("method BallCntOver")] HRESULT BallCntOver([out, retval] int *pVal);
		[propget, id(313), helpstring("property Scatter")] HRESULT Scatter([out, retval] float *pVal);
		[propput, id(313), helpstring("property Scatter")] HRESULT Scatter([in] float newVal);
		[propget, id(314), helpstring("property HitHeight")] HRESULT HitHeight([out, retval] float *pVal);
		[propput, id(314), helpstring("property HitHeight")] HRESULT HitHeight([in] float newVal);
	};

	[
	uuid(BA80F24A-78B2-4c5d-A28D-0F1A9E7C555C),
	]
	dispinterface IKickerEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_HitEvents_Hit)]  void Hit();
		[id(DISPID_HitEvents_Unhit)]  void Unhit();
	}


	//////////////////////////////
	////// Decal
	///////////////////////////////

	[
		object,
		uuid(56DDB212-2F4A-41ef-875C-C1A9CA2038C9),
		dual,
		helpstring("IDecal Interface"),
		pointer_default(unique)
	]
	interface IDecal : IDispatch
	{
		//[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		//[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(1), helpstring("property Rotation")] HRESULT Rotation([out, retval] float *pVal);
		[propput, id(1), helpstring("property Rotation")] HRESULT Rotation([in] float newVal);
		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);
		[propget, id(3), helpstring("property Width")] HRESULT Width([out, retval] float *pVal);
		[propput, id(3), helpstring("property Width")] HRESULT Width([in] float newVal);
		[propget, id(4), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(4), helpstring("property Height")] HRESULT Height([in] float newVal);
		[propget, id(5), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(5), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(6), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(6), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(7), helpstring("property Type")] HRESULT Type([out, retval] DecalType *pVal);
		[propput, id(7), helpstring("property Type")] HRESULT Type([in] DecalType newVal);
		[propget, id(8), helpstring("property Text")] HRESULT Text([out, retval] BSTR *pVal);
		[propput, id(8), helpstring("property Text")] HRESULT Text([in] BSTR newVal);
		[propget, id(DISPID_Decal_SizingType), helpstring("property SizingType")] HRESULT SizingType([out, retval] SizingType *pVal);
		[propput, id(DISPID_Decal_SizingType), helpstring("property SizingType")] HRESULT SizingType([in] SizingType newVal);
		[propget, id(11), helpstring("property FontColor")] HRESULT FontColor([out, retval] OLE_COLOR *pVal);
		[propput, id(11), helpstring("property FontColor")] HRESULT FontColor([in] OLE_COLOR newVal);
		[propget, id(DISPID_Decal_Font), helpstring("property Font")] HRESULT Font([out, retval] IFontDisp **pVal);
		[propputref, id(DISPID_Decal_Font), helpstring("property Font")] HRESULT Font([in] IFontDisp *newVal);
		[propget, id(13), helpstring("property HasVerticalText")] HRESULT HasVerticalText([out, retval] VARIANT_BOOL *pVal);
		[propput, id(13), helpstring("property HasVerticalText")] HRESULT HasVerticalText([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
	};
	//////////////////////////////
	////// Primitive
	///////////////////////////////

	[
		object,
		uuid(5E972141-B842-43C8-BA84-B99DE34B2E73),
		dual,
		helpstring("IPrimitive Interface"),
		pointer_default(unique)
	]
	interface IPrimitive : IDispatch
	{
		//[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		//[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(101), helpstring("property Sides")] HRESULT Sides([out, retval] int *pVal);
		[propput, id(101), helpstring("property Sides")] HRESULT Sides([in] int newVal);
		[propget, id(103), helpstring("property Top Visible")] HRESULT TopVisible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(103), helpstring("property Top Visible")] HRESULT TopVisible([in] VARIANT_BOOL newVal);
		[propget, id(102), helpstring("property Top Color")] HRESULT TopColor([out, retval] OLE_COLOR *pVal);
		[propput, id(102), helpstring("property Top Color")] HRESULT TopColor([in] OLE_COLOR newVal);
		[propget, id(104), helpstring("property Side Color")] HRESULT SideColor([out, retval] OLE_COLOR *pVal);
		[propput, id(104), helpstring("property Side Color")] HRESULT SideColor([in] OLE_COLOR newVal);
		[propget, id(106), helpstring("property Draw Textures Inside")] HRESULT DrawTexturesInside([out, retval] VARIANT_BOOL *pVal);
		[propput, id(106), helpstring("property Draw Textures Inside")] HRESULT DrawTexturesInside([in] VARIANT_BOOL newVal);

		//!! deprecated
		[propget, id(584), helpstring("property UpdateRegions")] HRESULT UpdateRegions([out, retval] VARIANT_BOOL *pVal);
		[propput, id(584), helpstring("property UpdateRegions")] HRESULT UpdateRegions([in] VARIANT_BOOL newVal);
		[id(1585), helpstring("method TriggerSingleUpdate")] HRESULT TriggerSingleUpdate();

		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);

        [propget, id(DISPID_POSITION_X), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(DISPID_POSITION_X), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(DISPID_POSITION_Y), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(DISPID_POSITION_Y), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(DISPID_POSITION_Z), helpstring("property Z")] HRESULT Z([out, retval] float *pVal);
		[propput, id(DISPID_POSITION_Z), helpstring("property Z")] HRESULT Z([in] float newVal);
		[propget, id(DISPID_SIZE_X), helpstring("property Size X")] HRESULT Size_X([out, retval] float *pVal);
		[propput, id(DISPID_SIZE_X), helpstring("property Size X")] HRESULT Size_X([in] float newVal);
		[propget, id(DISPID_SIZE_Y), helpstring("property Size Y")] HRESULT Size_Y([out, retval] float *pVal);
		[propput, id(DISPID_SIZE_Y), helpstring("property Size Y")] HRESULT Size_Y([in] float newVal);
		[propget, id(DISPID_SIZE_Z), helpstring("property Size Z")] HRESULT Size_Z([out, retval] float *pVal);
		[propput, id(DISPID_SIZE_Z), helpstring("property Size Z")] HRESULT Size_Z([in] float newVal);
		[propget, id(DISPID_AXISSCALE_XY), helpstring("property AxisScale X->Y")] HRESULT AxisScaleX_Y([out, retval] float *pVal);
		[propput, id(DISPID_AXISSCALE_XY), helpstring("property AxisScale X->Y")] HRESULT AxisScaleX_Y([in] float newVal);
		[propget, id(DISPID_AXISSCALE_XZ), helpstring("property AxisScale X->Z")] HRESULT AxisScaleX_Z([out, retval] float *pVal);
		[propput, id(DISPID_AXISSCALE_XZ), helpstring("property AxisScale X->Z")] HRESULT AxisScaleX_Z([in] float newVal);
		[propget, id(DISPID_AXISSCALE_YX), helpstring("property AxisScale Y->X")] HRESULT AxisScaleY_X([out, retval] float *pVal);
		[propput, id(DISPID_AXISSCALE_YX), helpstring("property AxisScale Y->X")] HRESULT AxisScaleY_X([in] float newVal);
		[propget, id(DISPID_AXISSCALE_YZ), helpstring("property AxisScale Y->Z")] HRESULT AxisScaleY_Z([out, retval] float *pVal);
		[propput, id(DISPID_AXISSCALE_YZ), helpstring("property AxisScale Y->Z")] HRESULT AxisScaleY_Z([in] float newVal);
		[propget, id(DISPID_AXISSCALE_ZX), helpstring("property AxisScale Z->X")] HRESULT AxisScaleZ_X([out, retval] float *pVal);
		[propput, id(DISPID_AXISSCALE_ZX), helpstring("property AxisScale Z->X")] HRESULT AxisScaleZ_X([in] float newVal);
		[propget, id(DISPID_AXISSCALE_ZY), helpstring("property AxisScale Z->Y")] HRESULT AxisScaleZ_Y([out, retval] float *pVal);
		[propput, id(DISPID_AXISSCALE_ZY), helpstring("property AxisScale Z->Y")] HRESULT AxisScaleZ_Y([in] float newVal);

		[propget, id(DISPID_ROTRA1), helpstring("property Rot and Tra 1")] HRESULT RotAndTra0([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA1), helpstring("property Rot and Tra 1")] HRESULT RotAndTra0([in] float newVal);
		[propget, id(DISPID_ROT_X), helpstring("property Rotx")] HRESULT RotX([out, retval] float *pVal);
		[propput, id(DISPID_ROT_X), helpstring("property Rotx")] HRESULT RotX([in] float newVal);

		[propget, id(DISPID_ROTRA2), helpstring("property Rot and Tra 2")] HRESULT RotAndTra1([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA2), helpstring("property Rot and Tra 2")] HRESULT RotAndTra1([in] float newVal);
		[propget, id(DISPID_ROT_Y), helpstring("property Rot and Tra 2")] HRESULT RotY([out, retval] float *pVal);
		[propput, id(DISPID_ROT_Y), helpstring("property Rot and Tra 2")] HRESULT RotY([in] float newVal);

		[propget, id(DISPID_ROTRA3), helpstring("property Rot and Tra 3")] HRESULT RotAndTra2([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA3), helpstring("property Rot and Tra 3")] HRESULT RotAndTra2([in] float newVal);
		[propget, id(DISPID_ROT_Z), helpstring("property Rot and Tra 3")] HRESULT RotZ([out, retval] float *pVal);
		[propput, id(DISPID_ROT_Z), helpstring("property Rot and Tra 3")] HRESULT RotZ([in] float newVal);
		
		[propget, id(DISPID_ROTRA4), helpstring("property Rot and Tra 4")] HRESULT RotAndTra3([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA4), helpstring("property Rot and Tra 4")] HRESULT RotAndTra3([in] float newVal);
		[propget, id(DISPID_TRANS_X), helpstring("property Rot and Tra 4")] HRESULT TransX([out, retval] float *pVal);
		[propput, id(DISPID_TRANS_X), helpstring("property Rot and Tra 4")] HRESULT TransX([in] float newVal);
		
		[propget, id(DISPID_ROTRA5), helpstring("property Rot and Tra 5")] HRESULT RotAndTra4([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA5), helpstring("property Rot and Tra 5")] HRESULT RotAndTra4([in] float newVal);
		[propget, id(DISPID_TRANS_Y), helpstring("property Rot and Tra 5")] HRESULT TransY([out, retval] float *pVal);
		[propput, id(DISPID_TRANS_Y), helpstring("property Rot and Tra 5")] HRESULT TransY([in] float newVal);

		[propget, id(DISPID_ROTRA6), helpstring("property Rot and Tra 6")] HRESULT RotAndTra5([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA6), helpstring("property Rot and Tra 6")] HRESULT RotAndTra5([in] float newVal);
		[propget, id(DISPID_TRANS_Z), helpstring("property Rot and Tra 6")] HRESULT TransZ([out, retval] float *pVal);
		[propput, id(DISPID_TRANS_Z), helpstring("property Rot and Tra 6")] HRESULT TransZ([in] float newVal);

		[propget, id(DISPID_ROTRA7), helpstring("property Rot and Tra 7")] HRESULT RotAndTra6([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA7), helpstring("property Rot and Tra 7")] HRESULT RotAndTra6([in] float newVal);
		[propget, id(DISPID_OBJROT_X), helpstring("property Rot and Tra 7")] HRESULT ObjRotX([out, retval] float *pVal);
		[propput, id(DISPID_OBJROT_X), helpstring("property Rot and Tra 7")] HRESULT ObjRotX([in] float newVal);

		[propget, id(DISPID_ROTRA8), helpstring("property Rot and Tra 8")] HRESULT RotAndTra7([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA8), helpstring("property Rot and Tra 8")] HRESULT RotAndTra7([in] float newVal);
		[propget, id(DISPID_OBJROT_Y), helpstring("property Rot and Tra 8")] HRESULT ObjRotY([out, retval] float *pVal);
		[propput, id(DISPID_OBJROT_Y), helpstring("property Rot and Tra 8")] HRESULT ObjRotY([in] float newVal);

		[propget, id(DISPID_ROTRA9), helpstring("property Rot and Tra 9")] HRESULT RotAndTra8([out, retval] float *pVal);
		[propput, id(DISPID_ROTRA9), helpstring("property Rot and Tra 9")] HRESULT RotAndTra8([in] float newVal);
		[propget, id(DISPID_OBJROT_Z), helpstring("property Rot and Tra 9")] HRESULT ObjRotZ([out, retval] float *pVal);
		[propput, id(DISPID_OBJROT_Z), helpstring("property Rot and Tra 9")] HRESULT ObjRotZ([in] float newVal);

		/*
		[propget, id(DISPID_ROTATION_X), helpstring("property Rotation X")] HRESULT Rotation_X([out, retval] float *pVal);
		[propput, id(DISPID_ROTATION_X), helpstring("property Rotation X")] HRESULT Rotation_X([in] float newVal);
		[propget, id(DISPID_ROTATION_Y), helpstring("property Rotation Y")] HRESULT Rotation_Y([out, retval] float *pVal);
		[propput, id(DISPID_ROTATION_Y), helpstring("property Rotation Y")] HRESULT Rotation_Y([in] float newVal);
		[propget, id(DISPID_ROTATION_Z), helpstring("property Rotation Z")] HRESULT Rotation_Z([out, retval] float *pVal);
		[propput, id(DISPID_ROTATION_Z), helpstring("property Rotation Z")] HRESULT Rotation_Z([in] float newVal);
		[propget, id(DISPID_TRANSPOSITION_X), helpstring("property Transposition X")] HRESULT Transposition_X([out, retval] float *pVal);
		[propput, id(DISPID_TRANSPOSITION_X), helpstring("property Transposition X")] HRESULT Transposition_X([in] float newVal);
		[propget, id(DISPID_TRANSPOSITION_Y), helpstring("property Transposition Y")] HRESULT Transposition_Y([out, retval] float *pVal);
		[propput, id(DISPID_TRANSPOSITION_Y), helpstring("property Transposition Y")] HRESULT Transposition_Y([in] float newVal);
		[propget, id(DISPID_TRANSPOSITION_Z), helpstring("property Transposition Z")] HRESULT Transposition_Z([out, retval] float *pVal);
		[propput, id(DISPID_TRANSPOSITION_Z), helpstring("property Transposition Z")] HRESULT Transposition_Z([in] float newVal);*/
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
  		[propget, id(394), helpstring("property enable lighting")] HRESULT EnableLighting([out, retval] VARIANT_BOOL *pVal);
		[propput, id(394), helpstring("property enable lighting")] HRESULT EnableLighting([in] VARIANT_BOOL newVal);
  		[propget, id(398), helpstring("property static rendering")] HRESULT EnableStaticRendering([out, retval] VARIANT_BOOL *pVal);
		[propput, id(398), helpstring("property static rendering")] HRESULT EnableStaticRendering([in] VARIANT_BOOL newVal);
  		[propget, id(396), helpstring("property sphere mapping")] HRESULT EnableSphereMapping([out, retval] VARIANT_BOOL *pVal);
		[propput, id(396), helpstring("property sphere mapping")] HRESULT EnableSphereMapping([in] VARIANT_BOOL newVal);

  		[propget, id(110), helpstring("property Elasticity")] HRESULT Elasticity([out, retval] float *pVal);
		[propput, id(110), helpstring("property Elasticity")] HRESULT Elasticity([in] float newVal);
		
		[propget, id(111), helpstring("property Collidable")] HRESULT Collidable([out, retval] VARIANT_BOOL *pVal);
		[propput, id(111), helpstring("property Collidable")] HRESULT Collidable([in] VARIANT_BOOL newVal);
		[propget, id(395), helpstring("property IsToy")] HRESULT IsToy([out, retval] VARIANT_BOOL *pVal);
		[propput, id(395), helpstring("property IsToy")] HRESULT IsToy([in] VARIANT_BOOL newVal);
		[propget, id(34), helpstring("property HasHitEvent")] HRESULT HasHitEvent([out, retval] VARIANT_BOOL *pVal);
		[propput, id(34), helpstring("property HasHitEvent")] HRESULT HasHitEvent([in] VARIANT_BOOL newVal);
		[propget, id(33), helpstring("property Threshold")] HRESULT Threshold([out, retval] float *pVal);
		[propput, id(33), helpstring("property Threshold")] HRESULT Threshold([in] float newVal);
		[propget, id(114), helpstring("property Friction")] HRESULT Friction([out, retval] float *pVal);
		[propput, id(114), helpstring("property Friction")] HRESULT Friction([in] float newVal);
		[propget, id(115), helpstring("property Scatter")] HRESULT Scatter([out, retval] float *pVal);
		[propput, id(115), helpstring("property Scatter")] HRESULT Scatter([in] float newVal);

		[propget, id(397), helpstring("property DepthBias")] HRESULT DepthBias([out, retval] float *pVal);
		[propput, id(397), helpstring("property DepthBias")] HRESULT DepthBias([in] float newVal);

	};

	[
	uuid(99BDCE95-9BD2-42D6-B1F9-1DF8317932C0),
	]
	dispinterface IPrimitiveEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
//		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_HitEvents_Hit)]  void Hit();
	}

	//////////////////////////////
	////// Gate
	///////////////////////////////

	[
		object,
		uuid(9459EA61-42FE-4315-9289-A2CB298324CC),
		dual,
		helpstring("IGate Interface"),
		pointer_default(unique)
	]
	interface IGate : IDispatch
	{
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(DISPID_Gate_Length), helpstring("property Length")] HRESULT Length([out, retval] float *pVal);
		[propput, id(DISPID_Gate_Length), helpstring("property Length")] HRESULT Length([in] float newVal);
		[propget, id(1142), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(1142), helpstring("property Height")] HRESULT Height([in] float newVal);
		[propget, id(DISPID_Gate_Rotation), helpstring("property Rotation")] HRESULT Rotation([out, retval] float *pVal);
		[propput, id(DISPID_Gate_Rotation), helpstring("property Rotation")] HRESULT Rotation([in] float newVal);
		[propget, id(5), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(5), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(6), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(6), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(7), helpstring("property Open")] HRESULT Open([out, retval] VARIANT_BOOL *pVal);
		[propput, id(7), helpstring("property Open")] HRESULT Open([in] VARIANT_BOOL newVal);

		[id(2147), helpstring("method Move")] HRESULT Move(int dir, [defaultvalue(0)] float speed, [defaultvalue(0)] float angle);

		[propget, id(DISPID_Image), helpstring("property ImageFront")] HRESULT ImageFront([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property ImageFront")] HRESULT ImageFront([in] BSTR newVal);
		[propget, id(DISPID_Image2), helpstring("property ImageBack")] HRESULT ImageBack([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image2), helpstring("property ImageBack")] HRESULT ImageBack([in] BSTR newVal);
		[propget, id(10), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(10), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(11), helpstring("property Elasticity")] HRESULT Elasticity([out, retval] float *pVal);
		[propput, id(11), helpstring("property Elasticity")] HRESULT Elasticity([in] float newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);

		
		[propget, id(2144), helpstring("property CloseAngle")] HRESULT CloseAngle([out, retval] float *pVal);
		[propput, id(2144), helpstring("property CloseAngle")] HRESULT CloseAngle([in] float newVal);
		[propget, id(2145), helpstring("property OpenAngle")] HRESULT OpenAngle([out, retval] float *pVal);
		[propput, id(2145), helpstring("property OpenAngle")] HRESULT OpenAngle([in] float newVal);
		[propget, id(2146), helpstring("property Collidable")] HRESULT Collidable([out, retval] VARIANT_BOOL *pVal);
		[propput, id(2146), helpstring("property Collidable")] HRESULT Collidable([in] VARIANT_BOOL newVal);
		[propget, id(12), helpstring("property Friction")] HRESULT Friction([out, retval] float *pVal);
		[propput, id(12), helpstring("property Friction")] HRESULT Friction([in] float newVal);
		[propget, id(13), helpstring("property Animations")] HRESULT Animations([out, retval] int *pVal);
		[propput, id(13), helpstring("property Animations")] HRESULT Animations([in] int newVal);
		[propget, id(14), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(14), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(15), helpstring("property Supports")] HRESULT Supports([out, retval] VARIANT_BOOL *pVal);
		[propput, id(15), helpstring("property Supports")] HRESULT Supports([in] VARIANT_BOOL newVal);
		[propget, id(16), nonbrowsable, helpstring("property CurrentAngle")] HRESULT CurrentAngle([out, retval] float *pVal);
		[propget, id(557), helpstring("property EnableLighting")] HRESULT EnableLighting([out, retval] VARIANT_BOOL *pVal);
		[propput, id(557), helpstring("property EnableLighting")] HRESULT EnableLighting([in] VARIANT_BOOL newVal);
	};

	[
	uuid(D7753568-BFD4-4843-B2B1-766CCD9A20BA),
	]
	dispinterface IGateEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_HitEvents_Hit)]  void Hit();
		[id(DISPID_LimitEvents_EOS)]  void LimitEOS( [in] float parm);
		[id(DISPID_LimitEvents_BOS)]  void LimitBOS( [in] float parm);
	}

	//////////////////////////////
	////// Spinner
	///////////////////////////////

	[
		object,
		uuid(ED5CE186-E654-4AEB-9959-E4DC93128958),
		dual,
		helpstring("ISpinner Interface"),
		pointer_default(unique)
	]
	interface ISpinner : IDispatch
	{
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(DISPID_Spinner_Length), helpstring("property Length")] HRESULT Length([out, retval] float *pVal);
		[propput, id(DISPID_Spinner_Length), helpstring("property Length")] HRESULT Length([in] float newVal);
		[propget, id(4), helpstring("property Rotation")] HRESULT Rotation([out, retval] float *pVal);
		[propput, id(4), helpstring("property Rotation")] HRESULT Rotation([in] float newVal);
		[propget, id(5), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(5), helpstring("property Height")] HRESULT Height([in] float newVal);
		[propget, id(6), helpstring("property Overhang")] HRESULT Overhang([out, retval] float *pVal);
		[propput, id(6), helpstring("property Overhang")] HRESULT Overhang([in] float newVal);
		[propget, id(7), helpstring("property Friction")] HRESULT Friction([out, retval] float *pVal);
		[propput, id(7), helpstring("property Friction")] HRESULT Friction([in] float newVal);
		[propget, id(DISPID_Image), helpstring("property ImageFront")] HRESULT ImageFront([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property ImageFront")] HRESULT ImageFront([in] BSTR newVal);
		[propget, id(DISPID_Image2), helpstring("property ImageBack")] HRESULT ImageBack([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image2), helpstring("property ImageBack")] HRESULT ImageBack([in] BSTR newVal);
		[propget, id(10), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(10), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(11), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(11), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(12), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(12), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([out, retval] BSTR *pVal);
		[propput, id(DISPID_Surface), helpstring("property Surface")] HRESULT Surface([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(107), helpstring("property CastsShadow")] HRESULT CastsShadow([out, retval] VARIANT_BOOL *pVal);
		[propput, id(107), helpstring("property CastsShadow")] HRESULT CastsShadow([in] VARIANT_BOOL newVal);
		[propget, id(108), helpstring("property Supports")] HRESULT Supports([out, retval] VARIANT_BOOL *pVal);
		[propput, id(108), helpstring("property Supports")] HRESULT Supports([in] VARIANT_BOOL newVal);

		[propget, id(13), helpstring("property AngleMax")] HRESULT AngleMax([out, retval] float *pVal);
		[propput, id(13), helpstring("property AngleMax")] HRESULT AngleMax([in] float newVal);
		[propget, id(14), helpstring("property AngleMin")] HRESULT AngleMin([out, retval] float *pVal);
		[propput, id(14), helpstring("property AngleMin")] HRESULT AngleMin([in] float newVal);
		[propget, id(15), helpstring("property Elasticity")] HRESULT Elasticity([out, retval] float *pVal);
		[propput, id(15), helpstring("property Elasticity")] HRESULT Elasticity([in] float newVal);
		[propget, id(16), helpstring("property Animations")] HRESULT Animations([out, retval] int *pVal);
		[propput, id(16), helpstring("property Animations")] HRESULT Animations([in] int newVal);
		[propget, id(17), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(17), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[propget, id(18), nonbrowsable, helpstring("property CurrentAngle")] HRESULT CurrentAngle([out, retval] float *pVal);
	};

	[
	uuid(1B57054E-DB6D-4a12-AD63-BDAB51148562),
	]
	dispinterface ISpinnerEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_SpinnerEvents_Spin)]  void Spin();
		[id(DISPID_LimitEvents_EOS)]  void LimitEOS( [in] float parm);
		[id(DISPID_LimitEvents_BOS)]  void LimitBOS( [in] float parm);
	}

	/////////////////////////////////////////////
	// Ramp
	//////////////////////////////////////////

	[
		object,
		uuid(A90308CF-09D8-4c38-99B6-9E371EA41B97),
		dual,
		helpstring("IRamp Interface"),
		pointer_default(unique)
	]
	interface IRamp : IDispatch
	{
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(1), helpstring("property HeightBottom")] HRESULT HeightBottom([out, retval] float *pVal);
		[propput, id(1), helpstring("property HeightBottom")] HRESULT HeightBottom([in] float newVal);
		[propget, id(2), helpstring("property HeightTop")] HRESULT HeightTop([out, retval] float *pVal);
		[propput, id(2), helpstring("property HeightTop")] HRESULT HeightTop([in] float newVal);
		[propget, id(3), helpstring("property WidthBottom")] HRESULT WidthBottom([out, retval] float *pVal);
		[propput, id(3), helpstring("property WidthBottom")] HRESULT WidthBottom([in] float newVal);
		[propget, id(4), helpstring("property WidthTop")] HRESULT WidthTop([out, retval] float *pVal);
		[propput, id(4), helpstring("property WidthTop")] HRESULT WidthTop([in] float newVal);
		[propget, id(5), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(5), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(6), helpstring("property Type")] HRESULT Type([out, retval] RampType *pVal);
		[propput, id(6), helpstring("property Type")] HRESULT Type([in] RampType newVal);
		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);
		[propget, id(8), helpstring("property ImageAlignment")] HRESULT ImageAlignment([out, retval] RampImageAlignment *pVal);
		[propput, id(8), helpstring("property ImageAlignment")] HRESULT ImageAlignment([in] RampImageAlignment newVal);
		[propget, id(9), helpstring("property HasWallImage")] HRESULT HasWallImage([out, retval] VARIANT_BOOL *pVal);
		[propput, id(9), helpstring("property HasWallImage")] HRESULT HasWallImage([in] VARIANT_BOOL newVal);
		[propget, id(10), helpstring("property LeftWallHeight")] HRESULT LeftWallHeight([out, retval] float *pVal);
		[propput, id(10), helpstring("property LeftWallHeight")] HRESULT LeftWallHeight([in] float newVal);
		[propget, id(11), helpstring("property RightWallHeight")] HRESULT RightWallHeight([out, retval] float *pVal);
		[propput, id(11), helpstring("property RightWallHeight")] HRESULT RightWallHeight([in] float newVal);
		[propget, id(378), helpstring("property Solid")] HRESULT Solid([out, retval] VARIANT_BOOL *pVal);
		[propput, id(378), helpstring("property Solid")] HRESULT Solid([in] VARIANT_BOOL newVal);
		[propget, id(379), helpstring("property Acrylic")] HRESULT Acrylic([out, retval] VARIANT_BOOL *pVal);
		[propput, id(379), helpstring("property Acrylic")] HRESULT Acrylic([in] VARIANT_BOOL newVal);
		[propget, id(380), helpstring("property Alpha")] HRESULT Alpha([out, retval] VARIANT_BOOL *pVal);
		[propput, id(380), helpstring("property Alpha")] HRESULT Alpha([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(107), helpstring("property CastsShadow")] HRESULT CastsShadow([out, retval] VARIANT_BOOL *pVal);
		[propput, id(107), helpstring("property CastsShadow")] HRESULT CastsShadow([in] VARIANT_BOOL newVal);
		[propget, id(108), helpstring("property VisibleLeftWallHeight")] HRESULT VisibleLeftWallHeight([out, retval] float *pVal);
		[propput, id(108), helpstring("property VisibleLeftWallHeight")] HRESULT VisibleLeftWallHeight([in] float newVal);
		[propget, id(109), helpstring("property VisibleRightWallHeight")] HRESULT VisibleRightWallHeight([out, retval] float *pVal);
		[propput, id(109), helpstring("property VisibleRightWallHeight")] HRESULT VisibleRightWallHeight([in] float newVal);
		[propget, id(110), helpstring("property Elasticity")] HRESULT Elasticity([out, retval] float *pVal);
		[propput, id(110), helpstring("property Elasticity")] HRESULT Elasticity([in] float newVal);
		
		[propget, id(111), helpstring("property Collidable")] HRESULT Collidable([out, retval] VARIANT_BOOL *pVal);
		[propput, id(111), helpstring("property Collidable")] HRESULT Collidable([in] VARIANT_BOOL newVal);

		[propget, id(112), helpstring("property IsVisible")] HRESULT IsVisible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(112), helpstring("property IsVisible")] HRESULT IsVisible([in] VARIANT_BOOL newVal);

		[propget, id(114), helpstring("property Friction")] HRESULT Friction([out, retval] float *pVal);
		[propput, id(114), helpstring("property Friction")] HRESULT Friction([in] float newVal);
		[propget, id(115), helpstring("property Scatter")] HRESULT Scatter([out, retval] float *pVal);
		[propput, id(115), helpstring("property Scatter")] HRESULT Scatter([in] float newVal);

		[propget, id(554), helpstring("property Modify3DStereo")] HRESULT Modify3DStereo([out, retval] VARIANT_BOOL *pVal);
		[propput, id(554), helpstring("property Modify3DStereo")] HRESULT Modify3DStereo([in] VARIANT_BOOL newVal);

	    //!! deprecated
		[propget, id(584), helpstring("property UpdateRegions")] HRESULT UpdateRegions([out, retval] VARIANT_BOOL *pVal);
		[propput, id(584), helpstring("property UpdateRegions")] HRESULT UpdateRegions([in] VARIANT_BOOL newVal);
		[id(1584), helpstring("method TriggerSingleUpdate")] HRESULT TriggerSingleUpdate();

		[propget, id(556), helpstring("property AddBlend")] HRESULT AddBlend([out, retval] VARIANT_BOOL *pVal);
		[propput, id(556), helpstring("property AddBlend")] HRESULT AddBlend([in] VARIANT_BOOL newVal);

        [propget, id(394), helpstring("property EnableLightingImage")] HRESULT EnableLightingImage([out, retval] VARIANT_BOOL *pVal);
		[propput, id(394), helpstring("property EnableLightingImage")] HRESULT EnableLightingImage([in] VARIANT_BOOL newVal);
		
		[propget, id(397), helpstring("property DepthBias")] HRESULT DepthBias([out, retval] float *pVal);
		[propput, id(397), helpstring("property DepthBias")] HRESULT DepthBias([in] float newVal);	
	};

	/////////////////////////////////////////////
	// Flasher
	//////////////////////////////////////////

	[
		object,
		uuid(87DAB93E-7D6F-4fe4-A5F9-632FD82BDB4A),
		dual,
		helpstring("IFlasher Interface"),
		pointer_default(unique)
	]
	interface IFlasher : IDispatch
	{
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(5), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(5), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(6), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(6), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(3), helpstring("property SizeX")] HRESULT SizeX([out, retval] float *pVal);
		[propput, id(3), helpstring("property SizeX")] HRESULT SizeX([in] float newVal);
		[propget, id(4), helpstring("property SizeY")] HRESULT SizeY([out, retval] float *pVal);
		[propput, id(4), helpstring("property SizeY")] HRESULT SizeY([in] float newVal);
		[propget, id(378), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(378), helpstring("property Height")] HRESULT Height([in] float newVal);
		[propget, id(1), helpstring("property RotZ")] HRESULT RotZ([out, retval] float *pVal);
		[propput, id(1), helpstring("property RotZ")] HRESULT RotZ([in] float newVal);
		[propget, id(2), helpstring("property RotY")] HRESULT RotY([out, retval] float *pVal);
		[propput, id(2), helpstring("property RotY")] HRESULT RotY([in] float newVal);
		[propget, id(7), helpstring("property RotX")] HRESULT RotX([out, retval] float *pVal);
		[propput, id(7), helpstring("property RotX")] HRESULT RotX([in] float newVal);
		[propget, id(11), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(11), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);
		[propget, id(13), helpstring("property DisplayTexture")] HRESULT DisplayTexture([out, retval] VARIANT_BOOL *pVal);
		[propput, id(13), helpstring("property DisplayTexture")] HRESULT DisplayTexture([in] VARIANT_BOOL newVal);
		[propget, id(377), helpstring("property Alpha")] HRESULT Alpha([out, retval] long *pVal);
		[propput, id(377), helpstring("property Alpha")] HRESULT Alpha([in] long newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);

		[propget, id(112), helpstring("property IsVisible")] HRESULT IsVisible([out, retval] VARIANT_BOOL *pVal);
		[propput, id(112), helpstring("property IsVisible")] HRESULT IsVisible([in] VARIANT_BOOL newVal);

	    //!! deprecated
		[propget, id(584), helpstring("property UpdateRegions")] HRESULT UpdateRegions([out, retval] VARIANT_BOOL *pVal);
		[propput, id(584), helpstring("property UpdateRegions")] HRESULT UpdateRegions([in] VARIANT_BOOL newVal);
		[id(1584), helpstring("method TriggerSingleUpdate")] HRESULT TriggerSingleUpdate();

		[propget, id(556), helpstring("property AddBlend")] HRESULT AddBlend([out, retval] VARIANT_BOOL *pVal);
		[propput, id(556), helpstring("property AddBlend")] HRESULT AddBlend([in] VARIANT_BOOL newVal);

		[propget, id(397), helpstring("property DepthBias")] HRESULT DepthBias([out, retval] float *pVal);
		[propput, id(397), helpstring("property DepthBias")] HRESULT DepthBias([in] float newVal);
	};

   
   
   /////////////////////////////////////////////
	// Ball
	//////////////////////////////////////////
	[
		object,
		uuid(CE5E583F-1264-4927-8509-B1359CB23034),
		dual,
		helpstring("IBall Interface"),
		pointer_default(unique)
	]
	interface IBall : IDispatch
	{
		[propget, id(1), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(1), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(2), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(2), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(3), helpstring("property VelX")] HRESULT VelX([out, retval] float *pVal);
		[propput, id(3), helpstring("property VelX")] HRESULT VelX([in] float newVal);
		[propget, id(4), helpstring("property VelY")] HRESULT VelY([out, retval] float *pVal);
		[propput, id(4), helpstring("property VelY")] HRESULT VelY([in] float newVal);
		[propget, id(5), helpstring("property Z")] HRESULT Z([out, retval] float *pVal);
		[propput, id(5), helpstring("property Z")] HRESULT Z([in] float newVal);
		[propget, id(6), helpstring("property VelZ")] HRESULT VelZ([out, retval] float *pVal);
		[propput, id(6), helpstring("property VelZ")] HRESULT VelZ([in] float newVal);
		[propget, id(7), helpstring("property Color")] HRESULT Color([out, retval] OLE_COLOR *pVal);
		[propput, id(7), helpstring("property Color")] HRESULT Color([in] OLE_COLOR newVal);
		[propget, id(13), helpstring("property DisableLighting")] HRESULT DisableLighting([out, retval] VARIANT_BOOL *pVal);
		[propput, id(13), helpstring("property DisableLighting")] HRESULT DisableLighting([in] VARIANT_BOOL newVal);
		[propget, id(8), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(8), helpstring("property Image")] HRESULT Image([in] BSTR newVal);
		[propget, id(9), helpstring("property FrontDecal")] HRESULT FrontDecal([out, retval] BSTR *pVal);
		[propput, id(9), helpstring("property FrontDecal")] HRESULT FrontDecal([in] BSTR newVal);
		[propget, id(10), helpstring("property BackDecal")] HRESULT BackDecal([out, retval] BSTR *pVal);
		[propput, id(10), helpstring("property BackDecal")] HRESULT BackDecal([in] BSTR newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(11), helpstring("property CollisionMass")] HRESULT CollisionMass([out, retval] float *pVal);
		[propput, id(11), helpstring("property CollisionMass")] HRESULT CollisionMass([in] float newVal);
		[propget, id(12), helpstring("property Radius")] HRESULT Radius([out, retval] float *pVal);
		[propput, id(12), helpstring("property Radius")] HRESULT Radius([in] float newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);	
		[id(100), helpstring("method DestroyBall")] HRESULT DestroyBall([out, retval] int *pVal);
	};

	[
	uuid(4392878D-6B34-404e-8CE5-BD368C60133A),
	]
	dispinterface IRampEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		//[id(DISPID_TimerEvents_Timer)]  void Timer();
	}

   [
	uuid(AC861BD8-A2BB-4d29-9EC5-A8E9C49D80FB),
	]
	dispinterface IFlasherEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		//[id(DISPID_TimerEvents_Timer)]  void Timer();
	}

	//////////////////////////////
	////// DispReel
	///////////////////////////////

	[
		object,
		uuid(35265276-0C22-4195-8F2E-7122703814B8),
		dual,
		helpstring("IDispReel Interface"),
		pointer_default(unique)
	]
	interface IDispReel : IDispatch
	{
		[propget, id(DISPID_DispReel_BackColor), helpstring("property BackColor")] HRESULT BackColor([out, retval] OLE_COLOR *pVal);
		[propput, id(DISPID_DispReel_BackColor), helpstring("property BackColor")] HRESULT BackColor([in] OLE_COLOR newVal);
		[propget, id(DISPID_Image), helpstring("property Image")] HRESULT Image([out, retval] BSTR *pVal);
		[propput, id(DISPID_Image), helpstring("property Image")] HRESULT Image([in] BSTR newVal);
		[propget, id(DISPID_DispReel_FontColor), helpstring("property FontColor")] HRESULT FontColor([out, retval] OLE_COLOR *pVal);
		[propput, id(DISPID_DispReel_FontColor), helpstring("property FontColor")] HRESULT FontColor([in] OLE_COLOR newVal);
		[propget, id(DISPID_DispReel_ReelColor), helpstring("property ReelColor")] HRESULT ReelColor([out, retval] OLE_COLOR *pVal);
		[propput, id(DISPID_DispReel_ReelColor), helpstring("property ReelColor")] HRESULT ReelColor([in] OLE_COLOR newVal);
		[propget, id(DISPID_DispReel_Font), helpstring("property Font")] HRESULT Font([out, retval] IFontDisp **pVal);
		[propputref, id(DISPID_DispReel_Font), helpstring("property Font")] HRESULT Font([in] IFontDisp *newVal);
		[propget, id(11), helpstring("property Reels")] HRESULT Reels([out, retval] float *pVal);
		[propput, id(11), helpstring("property Reels")] HRESULT Reels([in] float newVal);
		[propget, id(5), helpstring("property Width")] HRESULT Width([out, retval] float *pVal);
		[propput, id(5), helpstring("property Width")] HRESULT Width([in] float newVal);
		[propget, id(6), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(6), helpstring("property Height")] HRESULT Height([in] float newVal);
		[propget, id(7), helpstring("property Spacing")] HRESULT Spacing([out, retval] float *pVal);
		[propput, id(7), helpstring("property Spacing")] HRESULT Spacing([in] float newVal);
		[propget, id(12), helpstring("property IsTransparent")] HRESULT IsTransparent([out, retval] VARIANT_BOOL *pVal);
		[propput, id(12), helpstring("property IsTransparent")] HRESULT IsTransparent([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Sound), helpstring("property Sound")] HRESULT Sound([out, retval] BSTR *pVal);
		[propput, id(DISPID_Sound), helpstring("property Sound")] HRESULT Sound([in] BSTR newVal);
		[propget, id(8), helpstring("property Steps")] HRESULT Steps([out, retval] float *pVal);
		[propput, id(8), helpstring("property Steps")] HRESULT Steps([in] float newVal);
		[propget, id(13), helpstring("property IsShading")] HRESULT IsShading([out, retval] VARIANT_BOOL *pVal);
		[propput, id(13), helpstring("property IsShading")] HRESULT IsShading([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(9), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(9), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(10), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(10), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(16), helpstring("property Type")] HRESULT Type([out, retval] ReelType *pVal);
		[propput, id(16), helpstring("property Type")] HRESULT Type([in] ReelType newVal);
		[propget, id(14), helpstring("property Range")] HRESULT Range([out, retval] float *pVal);
		[propput, id(14), helpstring("property Range")] HRESULT Range([in] float newVal);
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(15), helpstring("property UpdateInterval")] HRESULT UpdateInterval([out, retval] long *pVal);
		[propput, id(15), helpstring("property UpdateInterval")] HRESULT UpdateInterval([in] long newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[propget, id(17), helpstring("property UseImageGrid")] HRESULT UseImageGrid([out, retval] VARIANT_BOOL *pVal);
		[propput, id(17), helpstring("property UseImageGrid")] HRESULT UseImageGrid([in] VARIANT_BOOL newVal);
		[propget, id(18), helpstring("property ImagesPerGridRow")] HRESULT ImagesPerGridRow([out, retval] long *pVal);
		[propput, id(18), helpstring("property ImagesPerGridRow")] HRESULT ImagesPerGridRow([in] long newVal);

		[id(30), helpstring("method AddValue")] HRESULT AddValue([in] long Value);
		[id(31), helpstring("method ResetToZero")] HRESULT ResetToZero();
		[id(32), helpstring("method SpinReel")] HRESULT SpinReel([in] long ReelNumber, [in] long PulseCount);
		[id(33), helpstring("method SetValue")] HRESULT SetValue([in] long Value);
	};

	[
	uuid(416D3717-1F94-4dae-86FF-67EA11128597),
	]
	dispinterface IDispReelEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
	}

	[
		object,
		uuid(4F9B83A5-F165-4411-83FD-48EEEAAD43A4),
		dual,
		helpstring("ILightSeq Interface"),
		pointer_default(unique)
	]
	interface ILightSeq : IDispatch
	{
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(DISPID_Collection), helpstring("property Collection")] HRESULT Collection([out, retval] BSTR *pVal);
		[propput, id(DISPID_Collection), helpstring("property Collection")] HRESULT Collection([in] BSTR newVal);
		[propget, id(9), helpstring("property CenterX")] HRESULT CenterX([out, retval] float *pVal);
		[propput, id(9), helpstring("property CenterX")] HRESULT CenterX([in] float newVal);
		[propget, id(10), helpstring("property CenterY")] HRESULT CenterY([out, retval] float *pVal);
		[propput, id(10), helpstring("property CenterY")] HRESULT CenterY([in] float newVal);
		[propget, id(15), helpstring("property UpdateInterval")] HRESULT UpdateInterval([out, retval] long *pVal);
		[propput, id(15), helpstring("property UpdateInterval")] HRESULT UpdateInterval([in] long newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
		[id(32), helpstring("method Play")] HRESULT Play([in] SequencerState Animation, [defaultvalue(0)] long TailLength, [defaultvalue(1)] long Repeat, [defaultvalue(0)] long Pause);
		[id(33), helpstring("method StopPlay")] HRESULT StopPlay();
      };

	[
	uuid(FE6B6615-41B1-4e34-A37F-447AE1B70853),
	]
	dispinterface ILightSeqEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
		[id(DISPID_LightSeqEvents_PlayDone)]  void PlayDone();
	}

	[
		object,
		uuid(46F8D548-1C32-41E2-A4CD-E25D4B253851),
		dual,
		helpstring("IComControl Interface"),
		pointer_default(unique)
	]
	interface IComControl : IDispatch
	{
		[propget, id(DISPID_Name), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(DISPID_Name), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(60000), helpstring("property X")] HRESULT X([out, retval] float *pVal);
		[propput, id(60000), helpstring("property X")] HRESULT X([in] float newVal);
		[propget, id(60001), helpstring("property Y")] HRESULT Y([out, retval] float *pVal);
		[propput, id(60001), helpstring("property Y")] HRESULT Y([in] float newVal);
		[propget, id(60002), helpstring("property Width")] HRESULT Width([out, retval] float *pVal);
		[propput, id(60002), helpstring("property Width")] HRESULT Width([in] float newVal);
		[propget, id(60003), helpstring("property Height")] HRESULT Height([out, retval] float *pVal);
		[propput, id(60003), helpstring("property Height")] HRESULT Height([in] float newVal);
		[propget, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([out, retval] VARIANT_BOOL *pVal);
		[propput, id(DISPID_Timer_Enabled), helpstring("property TimerEnabled")] HRESULT TimerEnabled([in] VARIANT_BOOL newVal);
		[propget, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([out, retval] long *pVal);
		[propput, id(DISPID_Timer_Interval), helpstring("property TimerInterval")] HRESULT TimerInterval([in] long newVal);
		[propget, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([out, retval] VARIANT* pVal);
		[propput, id(DISPID_UserValue), helpstring("property User")] HRESULT UserValue([in] VARIANT* newVal);
	};

	[
	uuid(59030739-04C4-4f5d-87D5-4A0193EDD519),
	]
	dispinterface IComControlEvents
	{
	properties:
	methods:
		[id(DISPID_GameEvents_Init)]  void Init();
		[id(DISPID_TimerEvents_Timer)]  void Timer();
	}

	[
	uuid(532AEBB0-9C1F-4247-9ED5-A3723FA61787),
	]
	dispinterface IFooEvents
	{
	properties:
	methods:
		[id(500)]  void Goo();
	}

	////////////////////////////////////
	////////////////////////////////////
	//////// CoClasses
	///////////////////////////////////
	///////////////////////////////////

	[
	uuid(8A942B56-F305-468d-97B3-F100921487C5),
	appobject
	]
	coclass Table
		{
		[default] interface ITable;
		[default, source]  dispinterface ITableEvents;
		};

	[
		uuid(CF3B5615-2271-4FE4-A1BF-E77D81B88C5D),
		helpstring("Wall Class")
	]
	coclass Wall
	{
		[default] interface IWall;
		[default, source]  dispinterface IWallEvents;
	};

	[
		uuid(83296774-CAA2-4A0D-B330-98DA6495DFE0),
		helpstring("DragPoint Class")
	]
	coclass DragPoint
	{
		[default] interface IControlPoint;
	};

	[
		uuid(68AB2BBC-8209-40F3-B6F4-54F8ADAA0DC7),
		helpstring("Flipper Class")
	]
	coclass Flipper
	{
		[default] interface IFlipper;
		[default, source]  dispinterface IFlipperEvents;
	};

	[
		uuid(A0B914E6-56A8-4CC1-A846-45FFF4D8CA17),
		helpstring("Timer Class")
	]
	coclass Timer
	{
		[default] interface ITimer;
		[default, source]  dispinterface ITimerEvents;
	};

	[
		uuid(4C43960F-E04C-4A51-9FBD-83AE50EECC7B),
		helpstring("Plunger Class")
	]
	coclass Plunger
	{
		[default] interface IPlunger;
		[default, source]  dispinterface IPlungerEvents;
	};

	[
		uuid(CB6071D5-E0E5-4CF9-B114-BB84EA701E9C),
		helpstring("Textbox Class")
	]
	coclass Textbox
	{
		[default] interface ITextbox;
		[default, source]  dispinterface ITextboxEvents;
	};

	[
		uuid(C242DDFF-0D79-4C56-967F-765A30DE8ED6),
		helpstring("Bumper Class")
	]
	coclass Bumper
	{
		[default] interface IBumper;
		[default, source]  dispinterface IBumperEvents;
	};

	[
		uuid(44D58C78-14BA-47F3-B82C-425853ABB698),
		helpstring("Trigger Class")
	]
	coclass Trigger
	{
		[default] interface ITrigger;
		[default, source]  dispinterface ITriggerEvents;
	};

	[
		uuid(31DD37E7-DB9B-4AB1-94C9-FAA06B252DFA),
		helpstring("Light Class")
	]
	coclass Light
	{
		[default] interface ILight;
		[default, source]  dispinterface ILightEvents;
	};

	[
		uuid(498EB992-C01F-4CD4-B710-E4E1D268C994),
		helpstring("Kicker Class")
	]
	coclass Kicker
	{
		[default] interface IKicker;
		[default, source]  dispinterface IKickerEvents;
	};

	[
		uuid(5692B7A1-B753-4F59-A9F9-8EE85E1A1C3D),
		helpstring("Gate Class")
	]
	coclass Gate
	{
		[default] interface IGate;
		[default, source]  dispinterface IGateEvents;
	};

	[
		uuid(355FA5FF-DB59-4D94-99E3-16D3B993D6B5),
		helpstring("Spinner Class")
	]
	coclass Spinner
	{
		[default] interface ISpinner;
		[default, source]  dispinterface ISpinnerEvents;
	};

	[
		uuid(374F02B0-57A4-40BC-8730-D351C858B9D3),
		helpstring("Ramp Class")
	]
	coclass Ramp
	{
		[default] interface IRamp;
		[default, source]  dispinterface IRampEvents;
	};

   [
		uuid(847B5F6C-65DC-4b3a-A721-B8F931C23133),
		helpstring("Flasher Class")
	]
	coclass Flasher
	{
		[default] interface IFlasher;
		[default, source]  dispinterface IFlasherEvents;
	};

	[
		uuid(D4966068-DEDB-4EB9-9AB8-4574CCAA5F1D),
		helpstring("Ball Class")
	]
	coclass Ball
	{
		[default] interface IBall;
	};

	[
		uuid(D4D4E043-594F-49f0-B561-4AA9942DCF18),
		helpstring("Collection Class")
	]
	coclass Collection
	{
		[default] interface ICollection;
		[default, source]  dispinterface ICollectionEvents;
	};

	[
		uuid(47B68E91-098C-44EE-B2B1-04C87654CF5E),
		helpstring("DispReel Class")
	]
	coclass DispReel
	{
		[default] interface IDispReel;
		[default, source]  dispinterface IDispReelEvents;
	};

	[
		uuid(F4758E77-AD9A-49A6-8146-AB94540F0102),
		helpstring("LightSeq Class")
	]
	coclass LightSeq
	{
		[default] interface ILightSeq;
		[default, source]  dispinterface ILightSeqEvents;
	};

	[
		uuid(5ACACC30-D0D9-44BF-9EA2-92C6C9D083A0),
		helpstring("ComControl Class")
	]
	coclass ComControl
	{
		[default] interface IComControl;
		[default, source]  dispinterface IComControlEvents;
	};

	[
		uuid(FFA76BF2-B558-4EF6-AA81-5FDC5F71CFE8),
		helpstring("Primitive Class")
	]
	coclass Primitive
	{
		[default] interface IPrimitive;
		[default, source]  dispinterface IPrimitiveEvents;
	};

};
